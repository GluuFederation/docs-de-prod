{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Docker Edition (DE) Documentation\n#\n\n\nThe Gluu Server is an Identity and Access Management (IAM) suite. It consists\nof several free open source components integrated together. \nCommunity Edition \n(CE)\n uses a \nchroot\n file system container. Docker containers\noffer process and network isolation. Docker is the future! \n\n\n\n\nThis distribution is \nnot production ready.\n If you'd like to help beta test DE, please \ncontact us\n and we'll provide you with test licenses. \n\n\n\n\nThere are several goals for the Gluu Server DE distribution:    \n\n\n\n\nElasticity: rapidly scale up and down compute resources based on demand.     \n\n\nMutli-cloud: support deployment on hybrid cloud or heterogenous cloud providers.     \n\n\nSelf-healing: system smart enough to adjust capacity based on demand.      \n\n\n\n\nDE includes the Gluu Engine component, which provides API's to automate devops--\ndeployment of VM's, network, containers, software and data. These API's also have \nan optional Web interface to facilitate administration by people.\n\n\nWhile one instance of CE is deployed on a single VM, DE components are \ndistributed. The diagram below provides an overview of where these components reside.\n\n\n\n\nThe control node can run anywhere on the network, even on your laptop. The discovery\nnode is a single instance. One Master node is required for each DE deployment. It includes\nthe Swarm master server, and it is the only node on which you can deploy oxTrust (which is\nnot a stateless application). The worker nodes is where you would scale--you can deploy\nany number of worker nodes.\n\n\nAdmin Guide\n#\n\n\n\n\nOverview\n\n\nInstallation\n\n\nGetting Started\n\n\nCluster Management\n\n\nComponents\n\n\nWeb Interface\n\n\nTroubleshooting\n\n\nRecovery\n\n\nMigration\n\n\nKnown Issues\n\n\n\n\nReference\n#\n\n\n- API\n\n  - \nCluster\n  \n\n  - \nProvider\n  \n\n  - \nNode\n  \n\n  - \nContainer\n  \n\n  - \nContainer Log\n  \n\n  - \nLicense Key",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-docker-edition-de-documentation",
            "text": "The Gluu Server is an Identity and Access Management (IAM) suite. It consists\nof several free open source components integrated together.  Community Edition \n(CE)  uses a  chroot  file system container. Docker containers\noffer process and network isolation. Docker is the future!    This distribution is  not production ready.  If you'd like to help beta test DE, please  contact us  and we'll provide you with test licenses.    There are several goals for the Gluu Server DE distribution:       Elasticity: rapidly scale up and down compute resources based on demand.       Mutli-cloud: support deployment on hybrid cloud or heterogenous cloud providers.       Self-healing: system smart enough to adjust capacity based on demand.         DE includes the Gluu Engine component, which provides API's to automate devops--\ndeployment of VM's, network, containers, software and data. These API's also have \nan optional Web interface to facilitate administration by people.  While one instance of CE is deployed on a single VM, DE components are \ndistributed. The diagram below provides an overview of where these components reside.   The control node can run anywhere on the network, even on your laptop. The discovery\nnode is a single instance. One Master node is required for each DE deployment. It includes\nthe Swarm master server, and it is the only node on which you can deploy oxTrust (which is\nnot a stateless application). The worker nodes is where you would scale--you can deploy\nany number of worker nodes.",
            "title": "Gluu Server Docker Edition (DE) Documentation"
        },
        {
            "location": "/#admin-guide",
            "text": "Overview  Installation  Getting Started  Cluster Management  Components  Web Interface  Troubleshooting  Recovery  Migration  Known Issues",
            "title": "Admin Guide"
        },
        {
            "location": "/#reference",
            "text": "- API \n  -  Cluster    \n  -  Provider    \n  -  Node    \n  -  Container    \n  -  Container Log    \n  -  License Key",
            "title": "Reference"
        },
        {
            "location": "/admin-guide/overview/",
            "text": "Overview\n#\n\n\n\n\n\n\nOverview\n\n\nDesign\n\n\nFunctionalities\n\n\nSupported Operating Systems\n\n\nHardware Requirements\n\n\nComponents\n\n\n\n\n\n\n\n\n\n\nGluu Docker Edition promises scalability, reliability and a fail-over mechanism through its innovative design implemented using \nDocker\n. \nDE\n can also call a DOS service, like \nDOSarrest\n, enabling protection from distributed denial of service attacks.\nThe \nDE\n package deploys the Gluu Server access management suite, which is capable of authenticating and authorizing users with both the SAML and OpenID Connect protocols. We recommended trying a single Gluu Server deployment first for testing as the \nDE\n packages require a commercial license.\n\n\nAn overview of the Gluu Server is available \nhere\n.\n\n\nDesign\n#\n\n\nThe Gluu Docker Edition has three principle components that are interdependent; the discovery, master, and worker.\n\n\nFunctionalities\n#\n\n\nThe core functionalities of the Gluu Server is available in the \nDE\n design with a few additional features such as cluster monitoring, DDOS protection and a fail-safe system.\nThe cluster administrator can use the dashboard to check on the health and activity, view logs and other Gluu Server administration tasks. The Gluu Server Administration Guide is available \nhere\n.\n\n\nSupported Operating Systems\n#\n\n\nThe following \n64-bit\n operating systems are supported by cluster:\n\n\n\n\nUbuntu Trusty (14.04)\n\n\n\n\nNote\n:\n\n\n\n\n32-bit operating systems are \nnot\n supported.\n\n\nAt least kernel 3.10 at minimum.\n\n\n\n\nHardware Requirements\n#\n\n\nAt minimum, the recommended resources for each server in cluster are:\n\n\n\n\n4 CPU Units\n\n\n8 GB of RAM\n\n\n80 GB of disk space\n\n\n\n\nComponents\n#\n\n\nThe Gluu Cluster takes advantage of the latest free, open-source, components which work together to provide a hickup-free cluster environment.\nThe components are listed in the \ncomponents page\n.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/overview/#overview",
            "text": "Overview  Design  Functionalities  Supported Operating Systems  Hardware Requirements  Components      Gluu Docker Edition promises scalability, reliability and a fail-over mechanism through its innovative design implemented using  Docker .  DE  can also call a DOS service, like  DOSarrest , enabling protection from distributed denial of service attacks.\nThe  DE  package deploys the Gluu Server access management suite, which is capable of authenticating and authorizing users with both the SAML and OpenID Connect protocols. We recommended trying a single Gluu Server deployment first for testing as the  DE  packages require a commercial license.  An overview of the Gluu Server is available  here .",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/overview/#design",
            "text": "The Gluu Docker Edition has three principle components that are interdependent; the discovery, master, and worker.",
            "title": "Design"
        },
        {
            "location": "/admin-guide/overview/#functionalities",
            "text": "The core functionalities of the Gluu Server is available in the  DE  design with a few additional features such as cluster monitoring, DDOS protection and a fail-safe system.\nThe cluster administrator can use the dashboard to check on the health and activity, view logs and other Gluu Server administration tasks. The Gluu Server Administration Guide is available  here .",
            "title": "Functionalities"
        },
        {
            "location": "/admin-guide/overview/#supported-operating-systems",
            "text": "The following  64-bit  operating systems are supported by cluster:   Ubuntu Trusty (14.04)   Note :   32-bit operating systems are  not  supported.  At least kernel 3.10 at minimum.",
            "title": "Supported Operating Systems"
        },
        {
            "location": "/admin-guide/overview/#hardware-requirements",
            "text": "At minimum, the recommended resources for each server in cluster are:   4 CPU Units  8 GB of RAM  80 GB of disk space",
            "title": "Hardware Requirements"
        },
        {
            "location": "/admin-guide/overview/#components",
            "text": "The Gluu Cluster takes advantage of the latest free, open-source, components which work together to provide a hickup-free cluster environment.\nThe components are listed in the  components page .",
            "title": "Components"
        },
        {
            "location": "/admin-guide/installation/",
            "text": "Installation\n\n\nPrerequisites\n\n\nMinimum Linux Kernel\n\n\n\n\n\n\nDocker Engine\n\n\nInstalling Docker Engine\n\n\n\n\n\n\nInstalling and running Gluu Docker Edition management system\n\n\nInstalling gluuengine and gluuwebui images\n\n\nPreparing Database\n\n\nRunning gluuengine\n\n\nRunning gluuwebui\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n#\n\n\nThe Gluu Docker Edition only supports Ubuntu for now. We need three containers to install Gluu Docker Edition management system.\n\n\n\n\ngluuengine\n\n\ngluuwebui\n\n\nmongodb (as database)\n\n\n\n\nPrerequisites\n#\n\n\nMinimum Linux Kernel\n#\n\n\nCluster requires at least kernel 3.10 at minimum. We can check whether we're using supported kernel.\n\n\nuname -r\n\n\n\nPlease note, due to \nissue with kernel 3.13.0-77\n, this version should be avoided.\n\n\nDocker Engine\n#\n\n\nInstalling Docker Engine\n#\n\n\nRun this:\n\n\n$ sudo curl -fsSL https://raw.githubusercontent.com/GluuFederation/cluster-tools/master/get_docker.sh | sh\n\n\n\n\nInstalling and running Gluu Docker Edition management system\n#\n\n\nInstalling gluuengine and gluuwebui images\n#\n\n\nFrom docker hub (not yet released):\n\n\ndocker pull gluu/gluuengine\ndocker pull gluu/gluuwebui\n\n\n\n\nAlternatively you can build it:\n\n\ngit clone https://github.com/GluuFederation/gluu-docker.git\ndocker build --rm=true --force-rm=true --tag=gluuengine gluu-docker/ubuntu/14.04/gluuengine\ndocker build --rm=true --force-rm=true --tag=gluuwebui gluu-docker/ubuntu/14.04/gluuwebui\n\n\n\n\nPreparing Database\n#\n\n\nPull the mongodb image and run its container:\n\n\ndocker run -d --name mongo -v /var/lib/gluuengine/db/mongo:/data/db mongo\n\n\n\n\nRunning gluuengine\n#\n\n\ngluuengine command:\n\n\ndocker run -d -p 127.0.0.1:8080:8080 --name gluuengine \\\n    -v /var/log/gluuengine:/var/log/gluuengine \\\n    -v /var/lib/gluuengine:/var/lib/gluuengine \\\n    -v /var/lib/gluuengine/machine:/root/.docker/machine \\\n    --link mongo:mongo gluuengine\n\n\n\n\nRunning gluuwebui\n#\n\n\ngluuwebui command:\n\n\ndocker run -d -p 127.0.0.1:8800:8800 --name gluuwebui \\\n    --link gluuengine:gluuengine gluuwebui\n\n\n\n\nAs gluuwebui is running in remote server, we need to do SSH tunneling:\n\n\nssh -L 8800:localhost:8800 <user>@<host_or_ip_address>\n\n\n\n\nThere are few things we need to know about Gluu Docker Edition Web UI:\n\n\n\n\nThe application is bind to 127.0.0.1 (localhost) as currently there's no protection mechanism yet.\n\n\nThe application is listening on port 8800 to avoid conflict with port exposed to nodes.",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/installation/#installation",
            "text": "The Gluu Docker Edition only supports Ubuntu for now. We need three containers to install Gluu Docker Edition management system.   gluuengine  gluuwebui  mongodb (as database)",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/installation/#prerequisites",
            "text": "",
            "title": "Prerequisites"
        },
        {
            "location": "/admin-guide/installation/#minimum-linux-kernel",
            "text": "Cluster requires at least kernel 3.10 at minimum. We can check whether we're using supported kernel.  uname -r  Please note, due to  issue with kernel 3.13.0-77 , this version should be avoided.",
            "title": "Minimum Linux Kernel"
        },
        {
            "location": "/admin-guide/installation/#docker-engine",
            "text": "",
            "title": "Docker Engine"
        },
        {
            "location": "/admin-guide/installation/#installing-docker-engine",
            "text": "Run this:  $ sudo curl -fsSL https://raw.githubusercontent.com/GluuFederation/cluster-tools/master/get_docker.sh | sh",
            "title": "Installing Docker Engine"
        },
        {
            "location": "/admin-guide/installation/#installing-and-running-gluu-docker-edition-management-system",
            "text": "",
            "title": "Installing and running Gluu Docker Edition management system"
        },
        {
            "location": "/admin-guide/installation/#installing-gluuengine-and-gluuwebui-images",
            "text": "From docker hub (not yet released):  docker pull gluu/gluuengine\ndocker pull gluu/gluuwebui  Alternatively you can build it:  git clone https://github.com/GluuFederation/gluu-docker.git\ndocker build --rm=true --force-rm=true --tag=gluuengine gluu-docker/ubuntu/14.04/gluuengine\ndocker build --rm=true --force-rm=true --tag=gluuwebui gluu-docker/ubuntu/14.04/gluuwebui",
            "title": "Installing gluuengine and gluuwebui images"
        },
        {
            "location": "/admin-guide/installation/#preparing-database",
            "text": "Pull the mongodb image and run its container:  docker run -d --name mongo -v /var/lib/gluuengine/db/mongo:/data/db mongo",
            "title": "Preparing Database"
        },
        {
            "location": "/admin-guide/installation/#running-gluuengine",
            "text": "gluuengine command:  docker run -d -p 127.0.0.1:8080:8080 --name gluuengine \\\n    -v /var/log/gluuengine:/var/log/gluuengine \\\n    -v /var/lib/gluuengine:/var/lib/gluuengine \\\n    -v /var/lib/gluuengine/machine:/root/.docker/machine \\\n    --link mongo:mongo gluuengine",
            "title": "Running gluuengine"
        },
        {
            "location": "/admin-guide/installation/#running-gluuwebui",
            "text": "gluuwebui command:  docker run -d -p 127.0.0.1:8800:8800 --name gluuwebui \\\n    --link gluuengine:gluuengine gluuwebui  As gluuwebui is running in remote server, we need to do SSH tunneling:  ssh -L 8800:localhost:8800 <user>@<host_or_ip_address>  There are few things we need to know about Gluu Docker Edition Web UI:   The application is bind to 127.0.0.1 (localhost) as currently there's no protection mechanism yet.  The application is listening on port 8800 to avoid conflict with port exposed to nodes.",
            "title": "Running gluuwebui"
        },
        {
            "location": "/admin-guide/getting-started/",
            "text": "Getting Started\n#\n\n\nThis document will show you how to get up and running with the Gluu Cluster Server. It is broken down into the following sections:\n\n\n\n\n\n\nGetting Started\n\n\nOverview\n\n\nPreparing VM\n\n\nExternal Ports\n\n\nInternal Ports\n\n\n\n\n\n\nDeployment\n\n\n\n\n\n\n\n\n\n\nOverview\n#\n\n\nThe Gluu Cluster is divided into various components; cluster API, discovery, master, and worker.\nThe cluster API is independent to function, but discovery, master, and worker are dependent to each other.\nThe deployment section will cover some basics of installation; for a detailed installation guide please see the \nInstallation Doc\n\n\nPreparing VM\n#\n\n\nCluster installation requires some ports to be accessible by the services and components required.\n\n\nExternal Ports\n#\n\n\nExternal ports can alse be called 'internet-facing' ports that are open to the world or internet.\n\n\n\n\n\n\n\n\nPort Protocol\n\n\nPort Number\n\n\nService\n\n\n\n\n\n\n\n\n\n\nTCP\n\n\n80\n\n\nWeb Frontend\n\n\n\n\n\n\nTCP\n\n\n443\n\n\nWeb Frontend\n\n\n\n\n\n\n\n\nNote:\n These ports only need to be open when you are downloading new packages. Most often your upgrade process will be tightly controlled, so you can plan for these changes and re-open the ports as needed.\n\n\nInternal Ports\n#\n\n\nInternal ports are the specific port requirements for the different components of the Cluster setup.\n\n\n\n\n\n\n\n\nPort Protocol\n\n\nPort Number\n\n\nService\n\n\n\n\n\n\n\n\n\n\nTCP\n\n\n8800\n\n\ngluu-cluster-webui\n\n\n\n\n\n\nTCP\n\n\n8080\n\n\ngluu-engine\n\n\n\n\n\n\nTCP\n\n\n2376\n\n\nDocker Daemon\n\n\n\n\n\n\nTCP\n\n\n3376\n\n\nDocker Swarm Daemon\n\n\n\n\n\n\nTCP\n\n\n8443\n\n\noxTrust GUI\n\n\n\n\n\n\nTCP\n\n\n8500\n\n\nConsul\n\n\n\n\n\n\nTCP & UDP\n\n\n6783\n\n\nWeave\n\n\n\n\n\n\nTCP & UDP\n\n\n53\n\n\nWeave DNS(Amazon AWS)\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\nPort 8080 and 8800 needed by control machine.\n\n\nPort 8443 needed by master node (VM).\n\n\nPort 8500 needed by discovery node (VM).\n\n\n\n\nDeployment\n#\n\n\n[TBA]",
            "title": "Getting Started"
        },
        {
            "location": "/admin-guide/getting-started/#getting-started",
            "text": "This document will show you how to get up and running with the Gluu Cluster Server. It is broken down into the following sections:    Getting Started  Overview  Preparing VM  External Ports  Internal Ports    Deployment",
            "title": "Getting Started"
        },
        {
            "location": "/admin-guide/getting-started/#overview",
            "text": "The Gluu Cluster is divided into various components; cluster API, discovery, master, and worker.\nThe cluster API is independent to function, but discovery, master, and worker are dependent to each other.\nThe deployment section will cover some basics of installation; for a detailed installation guide please see the  Installation Doc",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/getting-started/#preparing-vm",
            "text": "Cluster installation requires some ports to be accessible by the services and components required.",
            "title": "Preparing VM"
        },
        {
            "location": "/admin-guide/getting-started/#external-ports",
            "text": "External ports can alse be called 'internet-facing' ports that are open to the world or internet.     Port Protocol  Port Number  Service      TCP  80  Web Frontend    TCP  443  Web Frontend     Note:  These ports only need to be open when you are downloading new packages. Most often your upgrade process will be tightly controlled, so you can plan for these changes and re-open the ports as needed.",
            "title": "External Ports"
        },
        {
            "location": "/admin-guide/getting-started/#internal-ports",
            "text": "Internal ports are the specific port requirements for the different components of the Cluster setup.     Port Protocol  Port Number  Service      TCP  8800  gluu-cluster-webui    TCP  8080  gluu-engine    TCP  2376  Docker Daemon    TCP  3376  Docker Swarm Daemon    TCP  8443  oxTrust GUI    TCP  8500  Consul    TCP & UDP  6783  Weave    TCP & UDP  53  Weave DNS(Amazon AWS)     Notes:   Port 8080 and 8800 needed by control machine.  Port 8443 needed by master node (VM).  Port 8500 needed by discovery node (VM).",
            "title": "Internal Ports"
        },
        {
            "location": "/admin-guide/getting-started/#deployment",
            "text": "[TBA]",
            "title": "Deployment"
        },
        {
            "location": "/admin-guide/cluster-management/",
            "text": "Cluster Management\n\n\nOverview\n\n\nCreating Cluster\n\n\nCreating Provider\n\n\nCreating Nodes and Containers\n\n\nCreating Discovery Node\n\n\nCreating The Node\n\n\n\n\n\n\nCreating Master Node and Containers\n\n\nCreating The Node\n\n\nSSL Certificate and Key\n\n\nCustom LDAP Schema\n\n\nCustom oxAuth Files\n\n\nCustom oxTrust Files\n\n\nCreating Containers\n\n\nAccessing oxTrust Web Interface\n\n\n\n\n\n\nCreating Worker Node and Containers\n\n\nRegistering License Key\n\n\nCreating The Node\n\n\nCreating Containers\n\n\nLDAP Replication\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCluster Management\n#\n\n\nOverview\n#\n\n\nA \nCluster\n is a set of containers deployed in one or more \nNode\n.\nThe cluster contains information shared across node, like hostname.\n\n\nTo manage cluster, we can use Cluster Web UI or using API directly.\nNote, this page only covers how to manage cluster by using the API directly via \ncurl\n command.\nTo use Web UI, refer to \nWeb Interface\n page for details.\n\n\nCreating Cluster\n#\n\n\nThe following command creates a cluster using \ncurl\n.\n\n\ncurl http://localhost:8080/clusters \\\n    -d name=cluster1 \\\n    -d org_name=my-org \\\n    -d org_short_name=my-org \\\n    -d city=Austin \\\n    -d state=TX \\\n    -d country_code=US \\\n    -d admin_email='info@example.com' \\\n    -d ox_cluster_hostname=gluu.example.com \\\n    -d admin_pw=secret \\\n    -X POST -i\n\n\n\n\nThe parameters of the command are explained below:\n\n\n\n\nname\n represents the cluster name or label with which the cluster is identified.\n\n\norg_name\n, \norg_short_name\n, \ncity\n, \nstate\n, \ncountry_code\n, and \nadmin_email\n are used for X509 certificate.\n\n\nox_cluster_hostname\n is a URL for the appliance; this name must be a resolvable domain name.\n\n\nadmin_pw\n is used for LDAP password, LDAP replication password, and oxTrust admin password.\n\n\n\n\nA successful request returns a HTTP 201 status code:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"gluu.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}\n\n\n\n\nA full reference to Cluster API is available at \nCluster API page\n.\n\n\nCreating Provider\n#\n\n\nProvider represents a service that host the nodes. There are various provider type (driver) supported by Gluu Cluster Docker Edition at the moment:\n\n\n\n\ndigitalocean\n\n\naws\n\n\ngeneric\n\n\n\n\nNote, we will use \ndigitalocean\n as provider throughout this page.\n\n\nThe following command creates a provider using \ncurl\n.\n\n\ncurl http://localhost:8080/providers/digitalocean \\\n    -d name=my_do_provider \\\n    -d digitalocean_access_token=random-do-token \\\n    -d digitalocean_region=nyc3 \\\n    -X POST -i\n\n\n\n\nA successful request returns a HTTP 201 status code:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\n\n{\n    \"digitalocean_access_token\": \"random-do-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"name\": \"my_do_provider\"\n}\n\n\n\n\nWe will need the \nprovider_id\n when creating nodes, so let's keep the reference to \nprovider_id\n as environment variable.\n\n\nexport PROVIDER_ID=4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\n\n\n\n\nA full reference to Provider API is available at \nProvider API page\n.\n\n\nCreating Nodes and Containers\n#\n\n\nOnce we have one or more providers, we can create node. Node represents the actual server to host containers.\nThere are 3 node types supported by Gluu Cluster Docker Edition at the moment:\n\n\n\n\nDiscovery\n\n\nMaster\n\n\nWorker (optional)\n\n\n\n\nA full reference to Node API is available at \nNode API page\n.\n\n\nCreating Discovery Node\n#\n\n\nDiscovery node provides service discovery for all containers in the cluster. This node only hosts a single \nconsul\n container, which is automatically created by the API.\n\n\nCreating The Node\n#\n\n\nThe following command creates a discovery node using \ncurl\n.\n\n\ncurl http://localhost:8080/nodes/discovery \\\n    -d name=gluu.discovery \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i\n\n\n\n\nNote, for \nname\n parameter, we enforce \ngluu.discovery\n as its value. Changing the name will ended up in rejected request.\n\n\nA successful request returns a HTTP 201 status code:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu.discovery\n\n{\n    \"id\": \"1cd58004-4c87-449a-a918-195ff5af2e15\",\n    \"name\": \"gluu.discovery\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"discovery\"\n}\n\n\n\n\nCreating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in \nLocation\n header above.\n\n\nCreating Master Node and Containers\n#\n\n\nMaster node provides \nDocker Swarm\n manager to manage all containers in the cluster.\n\n\nCreating The Node\n#\n\n\nThe following command creates a master node using \ncurl\n.\n\n\ncurl http://localhost:8080/nodes/master \\\n    -d name=gluu-master \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i\n\n\n\n\nA successful request returns a HTTP 201 status code:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu-master\n\n{\n    \"id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f88\",\n    \"name\": \"gluu-master\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"master\"\n}\n\n\n\n\nCreating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in \nLocation\n header above.\n\n\nWe will need the \nnode_id\n when creating nodes, so let's keep the reference to \nnode_id\n as environment variable.\n\n\nexport MASTER_NODE_ID=0c715335-a1fe-4cd8-93f3-73fda8539f88\n\n\n\n\nSSL Certificate and Key\n#\n\n\nBy default, \ngluuengine\n will generate a self-signed SSL certificate and key called \nnginx.crt\n and \nnginx.key\n under \n/var/lib/gluuengine/ssl_certs\n directory.\nOne can use their own SSL certificate and key.\nSimply put their SSL certificate as \n/var/lib/gluuengine/ssl_certs/nginx.crt\n and SSL key as \n/var/lib/gluuengine/ssl_certs/nginx.key\n.\nWhen those files are exist, \ngluuengine\n will not generate self-signed certificate and key.\n\n\nCustom LDAP Schema\n#\n\n\nAny \nldap\n container has support for custom schema. To deploy custom schema, put the desired schema in \n.ldif\n file\non the same machine running \ngluu-engine\n under \n/var/lib/gluuengine/custom/opendj/schema/\n.\nFor example, we can create \n/var/lib/gluuengine/custom/opendj/schema/102-customSchema.ldif\n for our custom schema.\nThis file will be added to ldap container located at \n/opt/opendj/config/schema/102-customSchema.ldif\n.\nThe schema is copied on ldap server creation.\n\n\nPlease note, custom schema file must be created first before creating any LDAP container.\n\n\nCustom oxAuth Files\n#\n\n\nAny \noxauth\n container has support for custom \nxhtml\n, \nxml\n, or even \njar\n files.\nThere are predefined directories (create them if not exist yet) to put this file into:\n\n\n\n\n/var/lib/gluuengine/override/oxauth/pages\n for any HTML or XML file.\n\n\n/var/lib/gluuengine/override/oxauth/libs\n for any JAR file.\n\n\n/var/lib/gluuengine/override/oxauth/resources\n for any resource file (e.g. CSS).\n\n\n\n\nCustom oxAuth file can be created before or after \noxauth\n container creation.\n\n\nCustom oxTrust Files\n#\n\n\nAny \noxtrust\n container has support for custom \nxhtml\n, \nxml\n, or even \njar\n files.\nThere are predefined directories (create them if not exist yet) to put this file into:\n\n\n\n\n/var/lib/gluuengine/override/oxtrust/pages\n for any HTML or XML file.\n\n\n/var/lib/gluuengine/override/oxtrust/libs\n for any JAR file.\n\n\n/var/lib/gluuengine/override/oxtrust/resources\n for any resource file (e.g. CSS).\n\n\n\n\nCustom oxTrust file can be created before or after \noxtrust\n container creation.\n\n\nCreating Containers\n#\n\n\nOnce we have a running \nmaster\n node, we can start creating containers. To ensure the cluster running as expected, the order of container creation is shown below:\n\n\n\n\nldap\n\n\noxauth\n\n\noxtrust\n\n\nnginx\n\n\n\n\nIn this example, we are going to create \nldap\n container using \ncurl\n:\n\n\ncurl http://localhost:8080/containers/ldap \\\n    -d node_id=$MASTER_NODE_ID \\\n    -X POST -i\n\n\n\n\nA successful request returns a HTTP 202 status code:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616/setup\n\n{\n    \"cid\": \"\",\n    \"cluster_id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"hostname\": \"\",\n    \"id\": \"c14bd694-3895-4a77-8f51-200a232d5379\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldap_jmx_port\": \"1689\",\n    \"ldap_port\": \"1389\",\n    \"ldaps_port\": \"1636\",\n    \"name\": \"gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616\",\n    \"node_id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f88\",\n    \"state\": \"IN_PROGRESS\",\n    \"type\": \"ldap\"\n}\n\n\n\n\nCreating a container will take a while, hence the process is running as background job.\nTo check the status, we can make request to the URL as shown in \nLocation\n or \nX-Container-Setup-Log\n header above.\n\n\nThe rest of the containers can be created by using similar \ncurl\n command above. Make sure to change the URL.\nFor example, instead of sending request to \nhttp://localhost:8080/containers/ldap\n,\nwe need to use \nhttp://localhost:8080/containers/oxauth\n and so on.\n\n\nA full reference to Container API is available at \nContainer API page\n.\n\n\nAccessing oxTrust Web Interface\n#\n\n\nThe Gluu Server web interface can be accessed after the deployment of the containers are complete.\nThe oxTrust UI is run at \nhttps://localhost:8443\n in the master node.\nTo access the UI, \nssh\n tunneling must be established through \ndocker-machine\n script that have been installed.\n\n\ndocker-machine ssh gluu-master -L 8443:localhost:8443\n\n\n\n\nAfter the tunnel is established, visit \nhttps://localhost:8443\n in the web browser.\nThe oxTrust login page will load asking for a username and a password.\n\n\n\n\nusername: \nadmin\n\n\npassword: \nadmin_pw\n value from the cluster object\n\n\n\n\nIf the credentials are supplied correctly, the page will be redirected to the oxTrust dashboard.\n\n\nCreating Worker Node and Containers\n#\n\n\nOne of the purposes of creating worker node is to achieve HA setup in the cluster.\nIt means when master node (and its containers) is unavailable, we still have another node (and its containers) to serve requests.\nAlthough creating worker node is an optional step, it's recommended to do so if we want to achieve full-featured Gluu Cluster.\n\n\nRegistering License Key\n#\n\n\nRegistering license key is required before registering any worker node.\nRefer to \nLicense\n section to see available license types.\n\n\nTo register license key, we need to obtain code, public password, public key, and license password from Gluu.\nAfterwards, we can store them as Gluu Cluster's license key.\n\n\nThe following command will create a new license key.\n\n\ncurl http://localhost:8080/license_keys \\\n    -d public_key=unique-public-key \\\n    -d public_password=unique-public-password \\\n    -d license_password=unique-license-password \\\n    -d name=testing \\\n    -d code=unique-code \\\n    -X POST -i\n\n\n\n\nHere's an example of the response from request above:\n\n\n{\n        \"code\": \"unique-code\",\n        \"id\": \"cebc74fe-d4f2-4f02-9e99-4187f6b55b93\",\n        \"license_password\": \"unique-license-password\",\n        \"metadata\": {\n            \"expiration_date\": null,\n            \"license_count_limit\": 100,\n            \"license_features\": [\n                \"gluu_server\"\n            ],\n            \"license_name\": \"testing\",\n            \"license_type\": null,\n            \"multi_server\": false,\n            \"thread_count\": 3\n        },\n        \"name\": \"testing\",\n        \"public_key\": \"unique-public-key\"\n        \"public_password\": \"unique-public-password\",\n        \"valid\": true\n    }\n\n\n\n\n\nNote, \npublic_key\n, \npublic_password\n, and \nlicense_password\n must use one-liner values.\n\n\nCreating The Node\n#\n\n\nThe following command creates a worker node using \ncurl\n.\n\n\ncurl http://localhost:8080/nodes/worker \\\n    -d name=gluu-worker \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i\n\n\n\n\nA successful request returns a HTTP 201 status code:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu-master\n\n{\n    \"id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f99\",\n    \"name\": \"gluu-worker\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"worker\"\n}\n\n\n\n\nCreating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in \nLocation\n header above.\n\n\nWe will need the \nnode_id\n when creating nodes, so let's keep the reference to \nnode_id\n as environment variable.\n\n\nexport WORKER_NODE_ID=0c715335-a1fe-4cd8-93f3-73fda8539f99\n\n\n\n\nCreating Containers\n#\n\n\nOnce we have a running \nworker\n node, we can start creating containers. To ensure the cluster running as expected, the order of container creation is shown below:\n\n\n\n\nldap\n\n\noxauth\n\n\nnginx\n\n\n\n\nIn this example, we are going to create \nldap\n container using \ncurl\n:\n\n\ncurl http://localhost:8080/containers/ldap \\\n    -d node_id=$WORKER_NODE_ID \\\n    -X POST -i\n\n\n\n\nA successful request returns a HTTP 202 status code:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617/setup\n\n{\n    \"cid\": \"\",\n    \"cluster_id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"hostname\": \"\",\n    \"id\": \"c14bd694-3895-4a77-8f51-200a232d5380\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldap_jmx_port\": \"1689\",\n    \"ldap_port\": \"1389\",\n    \"ldaps_port\": \"1636\",\n    \"name\": \"gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617\",\n    \"node_id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f99\",\n    \"state\": \"IN_PROGRESS\",\n    \"type\": \"ldap\"\n}\n\n\n\n\nCreating a container will take a while, hence the process is running as background job.\nTo check the status, we can make request to the URL as shown in \nLocation\n or \nX-Container-Setup-Log\n header above.\n\n\nThe rest of the containers can be created by using similar \ncurl\n command above. Make sure to change the URL.\nFor example, instead of sending request to \nhttp://localhost:8080/containers/ldap\n,\nwe need to use \nhttp://localhost:8080/containers/oxauth\n and so on.\n\n\nLDAP Replication\n#\n\n\nAs we have two LDAP containers in the cluster (one each in master and worker node), all these LDAP containers will replicate themselves.\nHowever we need to check whether replication are created successfully by login to one of the LDAP containers.\n\n\nWe can list all containers in the cluster by running the following command:\n\n\ndocker `docker-machine config --swarm gluu-master` ps\n\n\n\n\nHere's an example of the output:\n\n\nCONTAINER ID        IMAGE                               NAMES\nf7f150462622        registry.gluu.org:5000/gluuopendj   gluu-worker/gluuopendj_e7c3ce2c-3d0f-40a1-bdd2-c4bfbabb6b16\n41ccbfdbd124        registry.gluu.org:5000/gluuopendj   gluu-master/gluuopendj_094ca34d-bd4b-4112-96f0-140b9652f20f\n\n\n\n\nFrom the example above, we know that one of the LDAP containers is having \n41ccbfdbd124\n as its ID. We can login to this container by running this command:\n\n\ndocker `docker-machine config --swarm gluu-master` exec -ti 41ccbfdbd124 bash\n\n\n\nOnce we are logged into the container, we can check the replication status by running the following command:\n\n\n/opt/opendj/bin/dsreplication status",
            "title": "Cluster Management"
        },
        {
            "location": "/admin-guide/cluster-management/#cluster-management",
            "text": "",
            "title": "Cluster Management"
        },
        {
            "location": "/admin-guide/cluster-management/#overview",
            "text": "A  Cluster  is a set of containers deployed in one or more  Node .\nThe cluster contains information shared across node, like hostname.  To manage cluster, we can use Cluster Web UI or using API directly.\nNote, this page only covers how to manage cluster by using the API directly via  curl  command.\nTo use Web UI, refer to  Web Interface  page for details.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-cluster",
            "text": "The following command creates a cluster using  curl .  curl http://localhost:8080/clusters \\\n    -d name=cluster1 \\\n    -d org_name=my-org \\\n    -d org_short_name=my-org \\\n    -d city=Austin \\\n    -d state=TX \\\n    -d country_code=US \\\n    -d admin_email='info@example.com' \\\n    -d ox_cluster_hostname=gluu.example.com \\\n    -d admin_pw=secret \\\n    -X POST -i  The parameters of the command are explained below:   name  represents the cluster name or label with which the cluster is identified.  org_name ,  org_short_name ,  city ,  state ,  country_code , and  admin_email  are used for X509 certificate.  ox_cluster_hostname  is a URL for the appliance; this name must be a resolvable domain name.  admin_pw  is used for LDAP password, LDAP replication password, and oxTrust admin password.   A successful request returns a HTTP 201 status code:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"gluu.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}  A full reference to Cluster API is available at  Cluster API page .",
            "title": "Creating Cluster"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-provider",
            "text": "Provider represents a service that host the nodes. There are various provider type (driver) supported by Gluu Cluster Docker Edition at the moment:   digitalocean  aws  generic   Note, we will use  digitalocean  as provider throughout this page.  The following command creates a provider using  curl .  curl http://localhost:8080/providers/digitalocean \\\n    -d name=my_do_provider \\\n    -d digitalocean_access_token=random-do-token \\\n    -d digitalocean_region=nyc3 \\\n    -X POST -i  A successful request returns a HTTP 201 status code:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\n\n{\n    \"digitalocean_access_token\": \"random-do-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"name\": \"my_do_provider\"\n}  We will need the  provider_id  when creating nodes, so let's keep the reference to  provider_id  as environment variable.  export PROVIDER_ID=4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea  A full reference to Provider API is available at  Provider API page .",
            "title": "Creating Provider"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-nodes-and-containers",
            "text": "Once we have one or more providers, we can create node. Node represents the actual server to host containers.\nThere are 3 node types supported by Gluu Cluster Docker Edition at the moment:   Discovery  Master  Worker (optional)   A full reference to Node API is available at  Node API page .",
            "title": "Creating Nodes and Containers"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-discovery-node",
            "text": "Discovery node provides service discovery for all containers in the cluster. This node only hosts a single  consul  container, which is automatically created by the API.",
            "title": "Creating Discovery Node"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-the-node",
            "text": "The following command creates a discovery node using  curl .  curl http://localhost:8080/nodes/discovery \\\n    -d name=gluu.discovery \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i  Note, for  name  parameter, we enforce  gluu.discovery  as its value. Changing the name will ended up in rejected request.  A successful request returns a HTTP 201 status code:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu.discovery\n\n{\n    \"id\": \"1cd58004-4c87-449a-a918-195ff5af2e15\",\n    \"name\": \"gluu.discovery\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"discovery\"\n}  Creating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in  Location  header above.",
            "title": "Creating The Node"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-master-node-and-containers",
            "text": "Master node provides  Docker Swarm  manager to manage all containers in the cluster.",
            "title": "Creating Master Node and Containers"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-the-node_1",
            "text": "The following command creates a master node using  curl .  curl http://localhost:8080/nodes/master \\\n    -d name=gluu-master \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i  A successful request returns a HTTP 201 status code:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu-master\n\n{\n    \"id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f88\",\n    \"name\": \"gluu-master\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"master\"\n}  Creating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in  Location  header above.  We will need the  node_id  when creating nodes, so let's keep the reference to  node_id  as environment variable.  export MASTER_NODE_ID=0c715335-a1fe-4cd8-93f3-73fda8539f88",
            "title": "Creating The Node"
        },
        {
            "location": "/admin-guide/cluster-management/#ssl-certificate-and-key",
            "text": "By default,  gluuengine  will generate a self-signed SSL certificate and key called  nginx.crt  and  nginx.key  under  /var/lib/gluuengine/ssl_certs  directory.\nOne can use their own SSL certificate and key.\nSimply put their SSL certificate as  /var/lib/gluuengine/ssl_certs/nginx.crt  and SSL key as  /var/lib/gluuengine/ssl_certs/nginx.key .\nWhen those files are exist,  gluuengine  will not generate self-signed certificate and key.",
            "title": "SSL Certificate and Key"
        },
        {
            "location": "/admin-guide/cluster-management/#custom-ldap-schema",
            "text": "Any  ldap  container has support for custom schema. To deploy custom schema, put the desired schema in  .ldif  file\non the same machine running  gluu-engine  under  /var/lib/gluuengine/custom/opendj/schema/ .\nFor example, we can create  /var/lib/gluuengine/custom/opendj/schema/102-customSchema.ldif  for our custom schema.\nThis file will be added to ldap container located at  /opt/opendj/config/schema/102-customSchema.ldif .\nThe schema is copied on ldap server creation.  Please note, custom schema file must be created first before creating any LDAP container.",
            "title": "Custom LDAP Schema"
        },
        {
            "location": "/admin-guide/cluster-management/#custom-oxauth-files",
            "text": "Any  oxauth  container has support for custom  xhtml ,  xml , or even  jar  files.\nThere are predefined directories (create them if not exist yet) to put this file into:   /var/lib/gluuengine/override/oxauth/pages  for any HTML or XML file.  /var/lib/gluuengine/override/oxauth/libs  for any JAR file.  /var/lib/gluuengine/override/oxauth/resources  for any resource file (e.g. CSS).   Custom oxAuth file can be created before or after  oxauth  container creation.",
            "title": "Custom oxAuth Files"
        },
        {
            "location": "/admin-guide/cluster-management/#custom-oxtrust-files",
            "text": "Any  oxtrust  container has support for custom  xhtml ,  xml , or even  jar  files.\nThere are predefined directories (create them if not exist yet) to put this file into:   /var/lib/gluuengine/override/oxtrust/pages  for any HTML or XML file.  /var/lib/gluuengine/override/oxtrust/libs  for any JAR file.  /var/lib/gluuengine/override/oxtrust/resources  for any resource file (e.g. CSS).   Custom oxTrust file can be created before or after  oxtrust  container creation.",
            "title": "Custom oxTrust Files"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-containers",
            "text": "Once we have a running  master  node, we can start creating containers. To ensure the cluster running as expected, the order of container creation is shown below:   ldap  oxauth  oxtrust  nginx   In this example, we are going to create  ldap  container using  curl :  curl http://localhost:8080/containers/ldap \\\n    -d node_id=$MASTER_NODE_ID \\\n    -X POST -i  A successful request returns a HTTP 202 status code:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616/setup\n\n{\n    \"cid\": \"\",\n    \"cluster_id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"hostname\": \"\",\n    \"id\": \"c14bd694-3895-4a77-8f51-200a232d5379\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldap_jmx_port\": \"1689\",\n    \"ldap_port\": \"1389\",\n    \"ldaps_port\": \"1636\",\n    \"name\": \"gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e616\",\n    \"node_id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f88\",\n    \"state\": \"IN_PROGRESS\",\n    \"type\": \"ldap\"\n}  Creating a container will take a while, hence the process is running as background job.\nTo check the status, we can make request to the URL as shown in  Location  or  X-Container-Setup-Log  header above.  The rest of the containers can be created by using similar  curl  command above. Make sure to change the URL.\nFor example, instead of sending request to  http://localhost:8080/containers/ldap ,\nwe need to use  http://localhost:8080/containers/oxauth  and so on.  A full reference to Container API is available at  Container API page .",
            "title": "Creating Containers"
        },
        {
            "location": "/admin-guide/cluster-management/#accessing-oxtrust-web-interface",
            "text": "The Gluu Server web interface can be accessed after the deployment of the containers are complete.\nThe oxTrust UI is run at  https://localhost:8443  in the master node.\nTo access the UI,  ssh  tunneling must be established through  docker-machine  script that have been installed.  docker-machine ssh gluu-master -L 8443:localhost:8443  After the tunnel is established, visit  https://localhost:8443  in the web browser.\nThe oxTrust login page will load asking for a username and a password.   username:  admin  password:  admin_pw  value from the cluster object   If the credentials are supplied correctly, the page will be redirected to the oxTrust dashboard.",
            "title": "Accessing oxTrust Web Interface"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-worker-node-and-containers",
            "text": "One of the purposes of creating worker node is to achieve HA setup in the cluster.\nIt means when master node (and its containers) is unavailable, we still have another node (and its containers) to serve requests.\nAlthough creating worker node is an optional step, it's recommended to do so if we want to achieve full-featured Gluu Cluster.",
            "title": "Creating Worker Node and Containers"
        },
        {
            "location": "/admin-guide/cluster-management/#registering-license-key",
            "text": "Registering license key is required before registering any worker node.\nRefer to  License  section to see available license types.  To register license key, we need to obtain code, public password, public key, and license password from Gluu.\nAfterwards, we can store them as Gluu Cluster's license key.  The following command will create a new license key.  curl http://localhost:8080/license_keys \\\n    -d public_key=unique-public-key \\\n    -d public_password=unique-public-password \\\n    -d license_password=unique-license-password \\\n    -d name=testing \\\n    -d code=unique-code \\\n    -X POST -i  Here's an example of the response from request above:  {\n        \"code\": \"unique-code\",\n        \"id\": \"cebc74fe-d4f2-4f02-9e99-4187f6b55b93\",\n        \"license_password\": \"unique-license-password\",\n        \"metadata\": {\n            \"expiration_date\": null,\n            \"license_count_limit\": 100,\n            \"license_features\": [\n                \"gluu_server\"\n            ],\n            \"license_name\": \"testing\",\n            \"license_type\": null,\n            \"multi_server\": false,\n            \"thread_count\": 3\n        },\n        \"name\": \"testing\",\n        \"public_key\": \"unique-public-key\"\n        \"public_password\": \"unique-public-password\",\n        \"valid\": true\n    }  Note,  public_key ,  public_password , and  license_password  must use one-liner values.",
            "title": "Registering License Key"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-the-node_2",
            "text": "The following command creates a worker node using  curl .  curl http://localhost:8080/nodes/worker \\\n    -d name=gluu-worker \\\n    -d provider_id=$PROVIDER_ID \\\n    -X POST -i  A successful request returns a HTTP 201 status code:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu-master\n\n{\n    \"id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f99\",\n    \"name\": \"gluu-worker\",\n    \"provider_id\": \"4362b1a2-ce6a-4b06-9a97-6ba9a0b952ea\",\n    \"type\": \"worker\"\n}  Creating a node will take a while, hence the process is running as background job. To check the status, we can make request to the URL as shown in  Location  header above.  We will need the  node_id  when creating nodes, so let's keep the reference to  node_id  as environment variable.  export WORKER_NODE_ID=0c715335-a1fe-4cd8-93f3-73fda8539f99",
            "title": "Creating The Node"
        },
        {
            "location": "/admin-guide/cluster-management/#creating-containers_1",
            "text": "Once we have a running  worker  node, we can start creating containers. To ensure the cluster running as expected, the order of container creation is shown below:   ldap  oxauth  nginx   In this example, we are going to create  ldap  container using  curl :  curl http://localhost:8080/containers/ldap \\\n    -d node_id=$WORKER_NODE_ID \\\n    -X POST -i  A successful request returns a HTTP 202 status code:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617/setup\n\n{\n    \"cid\": \"\",\n    \"cluster_id\": \"0085d134-c60a-483f-8e14-ebf7afd362f0\",\n    \"hostname\": \"\",\n    \"id\": \"c14bd694-3895-4a77-8f51-200a232d5380\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldap_jmx_port\": \"1689\",\n    \"ldap_port\": \"1389\",\n    \"ldaps_port\": \"1636\",\n    \"name\": \"gluuopendj_dbaadb89-4703-47e2-9d07-5fa7aa76e617\",\n    \"node_id\": \"0c715335-a1fe-4cd8-93f3-73fda8539f99\",\n    \"state\": \"IN_PROGRESS\",\n    \"type\": \"ldap\"\n}  Creating a container will take a while, hence the process is running as background job.\nTo check the status, we can make request to the URL as shown in  Location  or  X-Container-Setup-Log  header above.  The rest of the containers can be created by using similar  curl  command above. Make sure to change the URL.\nFor example, instead of sending request to  http://localhost:8080/containers/ldap ,\nwe need to use  http://localhost:8080/containers/oxauth  and so on.",
            "title": "Creating Containers"
        },
        {
            "location": "/admin-guide/cluster-management/#ldap-replication",
            "text": "As we have two LDAP containers in the cluster (one each in master and worker node), all these LDAP containers will replicate themselves.\nHowever we need to check whether replication are created successfully by login to one of the LDAP containers.  We can list all containers in the cluster by running the following command:  docker `docker-machine config --swarm gluu-master` ps  Here's an example of the output:  CONTAINER ID        IMAGE                               NAMES\nf7f150462622        registry.gluu.org:5000/gluuopendj   gluu-worker/gluuopendj_e7c3ce2c-3d0f-40a1-bdd2-c4bfbabb6b16\n41ccbfdbd124        registry.gluu.org:5000/gluuopendj   gluu-master/gluuopendj_094ca34d-bd4b-4112-96f0-140b9652f20f  From the example above, we know that one of the LDAP containers is having  41ccbfdbd124  as its ID. We can login to this container by running this command:  docker `docker-machine config --swarm gluu-master` exec -ti 41ccbfdbd124 bash  Once we are logged into the container, we can check the replication status by running the following command:  /opt/opendj/bin/dsreplication status",
            "title": "LDAP Replication"
        },
        {
            "location": "/admin-guide/components/",
            "text": "Components\n#\n\n\nThe Gluu Cluster takes advantage of some of the latest and greatest free open source components to provide a hassle-free management of the cluster system. The following components make Gluu Cluster an easy solution for the enterprise.\n\n\nGluu Engine\n#\n\n\nGluu Engine is a \nflask\n application that publishes API's and it is combined with the Crochet project. It is  also capable of handling asynchronous events.\n\n\nGluu Cluster UI\n#\n\n\nGluu Cluster UI is a Python application that can be used to manage the cluster through web-based User Interface.\n\n\nDocker\n#\n\n\nDocker\n is a container service \"that can package an application and its dependencies in a virtual container that can run on any Linux server. This helps enable flexibility and portability on where the application can run, whether on premises, public cloud, private cloud, bare metal, etc.\"\n1\n\n\nDocker Machine\n#\n\n\nDocker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with docker-machine commands. Please visit the \nDocker Machine\n documentation for more details.\n\n\nWeave\n#\n\n\nWeave is used to connect the docker containers through a virtual network. Weave is chosen because it provides mobility in the creation of nodes as the container can be scattered across multiple hosts/cloud providers and yet the cluster will be functional. Please visit the \nWeave Website\n for more information.",
            "title": "Components"
        },
        {
            "location": "/admin-guide/components/#components",
            "text": "The Gluu Cluster takes advantage of some of the latest and greatest free open source components to provide a hassle-free management of the cluster system. The following components make Gluu Cluster an easy solution for the enterprise.",
            "title": "Components"
        },
        {
            "location": "/admin-guide/components/#gluu-engine",
            "text": "Gluu Engine is a  flask  application that publishes API's and it is combined with the Crochet project. It is  also capable of handling asynchronous events.",
            "title": "Gluu Engine"
        },
        {
            "location": "/admin-guide/components/#gluu-cluster-ui",
            "text": "Gluu Cluster UI is a Python application that can be used to manage the cluster through web-based User Interface.",
            "title": "Gluu Cluster UI"
        },
        {
            "location": "/admin-guide/components/#docker",
            "text": "Docker  is a container service \"that can package an application and its dependencies in a virtual container that can run on any Linux server. This helps enable flexibility and portability on where the application can run, whether on premises, public cloud, private cloud, bare metal, etc.\" 1",
            "title": "Docker"
        },
        {
            "location": "/admin-guide/components/#docker-machine",
            "text": "Docker Machine is a tool that lets you install Docker Engine on virtual hosts, and manage the hosts with docker-machine commands. Please visit the  Docker Machine  documentation for more details.",
            "title": "Docker Machine"
        },
        {
            "location": "/admin-guide/components/#weave",
            "text": "Weave is used to connect the docker containers through a virtual network. Weave is chosen because it provides mobility in the creation of nodes as the container can be scattered across multiple hosts/cloud providers and yet the cluster will be functional. Please visit the  Weave Website  for more information.",
            "title": "Weave"
        },
        {
            "location": "/admin-guide/webui/",
            "text": "Cluster Management using Web Interface\n\n\nInstallation\n\n\nAccessing the Interface\n\n\nUsing the Web Interface\n\n\nManaging Cluster\n\n\nManaging Provider\n\n\nManaging Nodes\n\n\nManaging Discovery Node\n\n\nManaging Master Node\n\n\n\n\n\n\nManaging Containers\n\n\nManaging License Key\n\n\nManaging Additional Worker Nodes\n\n\nManaging Containers in Worker Node\n\n\nScaling oxAuth Container\n\n\nReviewing Cluster Setup\n\n\n\n\n\n\nHistory\n\n\n\n\n\n\n\n\n\n\nCluster Management using Web Interface\n#\n\n\nThe web interface provides a user friendly way of using the API and managing the various resources of the cluster.\n\n\nInstallation\n#\n\n\nThe installation of the web interface is covered in the Installation Section.\n\n\n\n\nInstall Web Interface Package\n\n\n\n\nAccessing the Interface\n#\n\n\nTo log into the web interface, it is necessary to ssh into the control machine, as the interface is run locally and it is not facing the internet for security reasons.\n\n\nRun the following command to SSH for accessing the web interface:\n\n\nssh -L 8800:localhost:8800 <ssh-user>@<ssh-host>\n\n\nPoint your browser to the following address to access the webui:\n\n\nhttp://localhost:8800\n\n\nUsing the Web Interface\n#\n\n\nManaging Cluster\n#\n\n\nWhen we access the interface for the first time, the following screen will appear:\n\n\n\n\nTo create a new cluster, click the \"New Cluster\" button. A new form with various fields will appear:\n\n\n\n\nEach field is mandatory, except \"Description\".\n\n\n\n\nIn the screen above, we use \nox.example.weave.local\n as an example of cluster domain.\nTo access the cluster, type \nhttps://ox.example.weave.local\n in browser's address bar.\nIn production, use our actual domain instead, e.g. \nmy-gluu-cluster.com\n.\nNote, this domain must be resolvable via DNS; otherwise the cluster will not work as expected.\n\n\nPlease remember, all URLs must be prefixed with \nhttps\n. That means we need to provide SSL certificate and key.\nIn Gluu Docker Edition, the certificate and key are called \nnginx.crt\n and \nnginx.key\n respectively, as we are using \nnginx\n as frontend.\nSo for example, if we have \nmy-ssl.crt\n and \nmy-ssl.key\n, we need to rename them to \nnginx.crt\n and \nnginx.key\n.\nAfterwards, put them under \n/var/lib/gluuengine/ssl_certs\n directory (create the directory if not exist).\n\n\nNow back to cluster overview.\n\n\n\n\nAs we have created a new cluster, a table will appear showing existing cluster information.\nTo see the details, click the link under \"Name\" header row. A new table will appear below the main table.\nTo delete the cluster, click the \"Delete\" button (the red box) under \"Actions\" header row.\n\n\nNow we can continue creating Provider.\n\n\nManaging Provider\n#\n\n\nProvider represents a service (typically a cloud provider) that host the nodes. There are various provider type (driver) supported by Gluu Cluster Docker Edition at the moment:\n\n\n\n\ndigitalocean\n for DigitalOcean\n\n\naws\n for Amazon AWS EC2\n\n\ngeneric\n for any generic service\n\n\n\n\n\n\nNote, we will use \ndigitalocean\n provider throughout this page.\n\n\nTo create a new provider, select dropdown as seen in screenshot above. A new form will appear as seen below:\n\n\n\n\nThis \ndigitalocean\n provider form has different fields with the ones that used for \naws\n or \ngeneric\n provider.\nRefer to \nProvider\n API for details.\n\n\nOnce provider has been created, we will be redirected to a page where we can see a list of providers.\nTo see each provider's details, we can click a link under \"ID\" header row.\n\n\n\n\nNow let's continue to Node management.\n\n\nManaging Nodes\n#\n\n\nNode represents the actual server to host containers.\nThere are 3 node types supported by Gluu Docker Edition at the moment:\n\n\n\n\nDiscovery\n\n\nMaster\n\n\nWorker (optional)\n\n\n\n\nA full reference to Node API is available at \nNode API page\n.\n\n\nManaging Discovery Node\n#\n\n\nTo create a new node, click the \"New Node\" button:\n\n\n\n\nA new form will appear and we can choose to create 3 different nodes, but since we don't have any node yet, the first node we must create is the discovery node.\nThe role of this node is to provide node discovery (adding/removing/searching) for all nodes in the cluster.\n\n\n\n\nClick the \"Add Node\" button as seen above and we will be redirected to a new page where we can see list of available nodes and their details.\n\n\n\n\nAs we can see, there are various \nstate_*\n attributes. Each of this attribute marks the progress of node deployment.\nEventually these attributes will be marked as finished (or \ntrue\n in this context) one by one.\n\n\nTo see the progress of node deployment, we need to run a command in the shell:\n\n\ntailf /var/log/gluuengine/node.log\n\n\n\n\nBelow is an example of discovery node deployment log:\n\n\n\n\nNote, we cannot deploy any Gluu container in discovery node, hence we need to create another node ... the Master node.\n\n\nManaging Master Node\n#\n\n\nTo create master node, repeat the process. When the form is shown, choose \"Master\" in \"Type\" dropdown field.\n\n\n\n\nClick the \"Add Node\" button as seen above and we will be redirected back and see there's new master node listed there.\n\n\n\n\nTo see the progress of the new node deployment, repeat this command in the shell:\n\n\ntailf /var/log/gluuengine/node.log\n\n\n\n\nBelow is an example of master node deployment log:\n\n\n\n\nAs we already have discovery and master nodes, let's start deploying Gluu container.\n\n\nManaging Containers\n#\n\n\nThere are 2 ways to deploy container(s):\n\n\n\n\nUsing \nNew Container\n button: only a single container can be selected.\n\n\nUsing \nScale Containers\n button: deploy multiple \noxauth\n containers. We will cover this feature later.\n\n\n\n\n\n\nTo ensure the cluster running as expected, the deployment should follow the following order:\n\n\n\n\nldap\n\n\noxauth\n\n\noxtrust\n (can be deployed only in master node)\n\n\nnginx\n\n\n\n\nClick the \"New Container\" button and a new form will appear:\n\n\n\n\nChoose \"LDAP\" in \"Container Type\" dropdown field and select existing node; in this case the \"gluu-master\" (master node). Remember, don't choose discovery node as it doesn't support Gluu container deployment.\n\n\nOnce the container has been created, it will be listed in a table as seen below:\n\n\n\nClicking the link under \"Name\" header row will show us the container's details.\nAs we can see, the \nldap\n container marked as \nIN_PROGRESS\n. That means the deployment is running (it may take a while to finish the whole process though). To see the progress, click the \"Search\" button under \"Logs\" header row.\n\n\nWhen \"Search\" button is clicked, a new \"Setup\" button will replace the old button under \"Logs\" header row. See the screenshot below:\n\n\n\n\nClick the \"Setup\" button and we will be redirected to a page where we can see the container deployment log.\n\n\n\n\nTo complete cluster setup, repeat the process of deploying container for \noxauth\n, \noxtrust\n, and \nnginx\n.\n\n\n\n\nOnce we have those 4 container types (all of them should be marked as SUCCESS though), we already have a basic cluster setup that should work as expected.\n\n\nLet's continue to add more nodes (including license key management, scaling containers, etc.) in next sections.\n\n\nManaging License Key\n#\n\n\nBefore adding any additional \nworker\n node, we need to add license first by clicking the \"New License Key\" button.\n\n\n\n\nA new form will appear and we need to fill all the fields.\n\n\n\n\nWe can use any value for \"Name\" field, but we need to match the values for \"Code\" (or \"licenseId\"), \"Public Key\", \"Public Password\", and \"License Password\" fields with license we retrieved from Gluu.\n\n\n\n\nOnce the license has been created, the license will be validated.\nIf the license is valid or not expired, we can continue to add more nodes and deploy containers in those new nodes.\n\n\nManaging Additional Worker Nodes\n#\n\n\nTo create worker node, repeat the process of creating new node. When the form is shown, choose \"Worker\" in \"Type\" dropdown field.\n\n\n\n\nClick the \"Add Node\" button as seen above and we will be redirected back and see there's new worker node listed there.\n\n\n\n\nTo see the progress of the new node deployment, repeat this command in the shell:\n\n\ntailf /var/log/gluuengine/node.log\n\n\n\n\nBelow is an example of worker node deployment log:\n\n\n\n\nWe can add more worker nodes, but in this example we will not add them anymore. Instead let's deploy containers to worker node.\n\n\nManaging Containers in Worker Node\n#\n\n\nTo deploy container in worker node, repeat the same process as we did in master node, but remember to choose the worker node in \"Node ID\" dropdown.\n\n\nBelow is an example of how to deploy \nnginx\n container in worker node:\n\n\n\n\nNote: In worker node, we are only allowed to deploy \nldap\n, \noxauth\n, and \nnginx\n container.\n\n\nScaling oxAuth Container\n#\n\n\nTo scale \noxauth\n container (deploying multiple instances at once), we can use the scaling feature introduced in \ngluuengine\n version 0.5.0.\n\n\nLet's get back to page where containers are listed. Click the \"Containers\" left pane menu and the buttons will be available as shown below:\n\n\n\n\nClick the \"Scale Containers\" button and new form will appear:\n\n\n\n\nIn the screenshot above, we're telling the app to deploy \n2 instances\n of \noxAuth\n container into the cluster.\nAfterwards click the \"Scale\" button and we will be redirected to list of containers page:\n\n\n\n\nAs we can see, there are 2 new oxAuth containers deployed in master and worker node (see the bottom 2 of the table above).\n\n\nIn addition, there's a counterpart of scaling feature called descaling:\n\n\n\n\nThe form is identical to scaling one, but we need to check the tickbox above the \"Scale\" button. What this descaling feature do is removing \nn instances\n of oxAuth container from the cluster.\n\n\nWith these scale/descale features, we can add or remove oxAuth containers easier than before.\n\n\nReviewing Cluster Setup\n#\n\n\nAs we have multi-nodes with various containers deployed into the cluster, let's take a review of our cluster.\nTo see an overview of what our cluster looks like, click the Gluu's logo (top left corner) in the app.\n\n\n\n\nWe can see how many nodes deployed in the cluster.\n\n\n\n\nAnd yes, we can see how many containers deployed in the cluster.\n\n\nHistory\n#\n\n\nAll the create requests made by the Web UI is saved in the file called  \nconfig-history.log\n. Each post request generate 3 lines of log:\n\n\n\n\nThe date and time of logging\n\n\nThe cUrl command equivalent of the POST request made from the web interface\n\n\nThe status code of the response provided by the API server\n\n\n\n\nThe log can be accessed from the browser at \nhttp://localhost:8800/static/config-history.log",
            "title": "Web Interface"
        },
        {
            "location": "/admin-guide/webui/#cluster-management-using-web-interface",
            "text": "The web interface provides a user friendly way of using the API and managing the various resources of the cluster.",
            "title": "Cluster Management using Web Interface"
        },
        {
            "location": "/admin-guide/webui/#installation",
            "text": "The installation of the web interface is covered in the Installation Section.   Install Web Interface Package",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/webui/#accessing-the-interface",
            "text": "To log into the web interface, it is necessary to ssh into the control machine, as the interface is run locally and it is not facing the internet for security reasons.  Run the following command to SSH for accessing the web interface:  ssh -L 8800:localhost:8800 <ssh-user>@<ssh-host>  Point your browser to the following address to access the webui:  http://localhost:8800",
            "title": "Accessing the Interface"
        },
        {
            "location": "/admin-guide/webui/#using-the-web-interface",
            "text": "",
            "title": "Using the Web Interface"
        },
        {
            "location": "/admin-guide/webui/#managing-cluster",
            "text": "When we access the interface for the first time, the following screen will appear:   To create a new cluster, click the \"New Cluster\" button. A new form with various fields will appear:   Each field is mandatory, except \"Description\".   In the screen above, we use  ox.example.weave.local  as an example of cluster domain.\nTo access the cluster, type  https://ox.example.weave.local  in browser's address bar.\nIn production, use our actual domain instead, e.g.  my-gluu-cluster.com .\nNote, this domain must be resolvable via DNS; otherwise the cluster will not work as expected.  Please remember, all URLs must be prefixed with  https . That means we need to provide SSL certificate and key.\nIn Gluu Docker Edition, the certificate and key are called  nginx.crt  and  nginx.key  respectively, as we are using  nginx  as frontend.\nSo for example, if we have  my-ssl.crt  and  my-ssl.key , we need to rename them to  nginx.crt  and  nginx.key .\nAfterwards, put them under  /var/lib/gluuengine/ssl_certs  directory (create the directory if not exist).  Now back to cluster overview.   As we have created a new cluster, a table will appear showing existing cluster information.\nTo see the details, click the link under \"Name\" header row. A new table will appear below the main table.\nTo delete the cluster, click the \"Delete\" button (the red box) under \"Actions\" header row.  Now we can continue creating Provider.",
            "title": "Managing Cluster"
        },
        {
            "location": "/admin-guide/webui/#managing-provider",
            "text": "Provider represents a service (typically a cloud provider) that host the nodes. There are various provider type (driver) supported by Gluu Cluster Docker Edition at the moment:   digitalocean  for DigitalOcean  aws  for Amazon AWS EC2  generic  for any generic service    Note, we will use  digitalocean  provider throughout this page.  To create a new provider, select dropdown as seen in screenshot above. A new form will appear as seen below:   This  digitalocean  provider form has different fields with the ones that used for  aws  or  generic  provider.\nRefer to  Provider  API for details.  Once provider has been created, we will be redirected to a page where we can see a list of providers.\nTo see each provider's details, we can click a link under \"ID\" header row.   Now let's continue to Node management.",
            "title": "Managing Provider"
        },
        {
            "location": "/admin-guide/webui/#managing-nodes",
            "text": "Node represents the actual server to host containers.\nThere are 3 node types supported by Gluu Docker Edition at the moment:   Discovery  Master  Worker (optional)   A full reference to Node API is available at  Node API page .",
            "title": "Managing Nodes"
        },
        {
            "location": "/admin-guide/webui/#managing-discovery-node",
            "text": "To create a new node, click the \"New Node\" button:   A new form will appear and we can choose to create 3 different nodes, but since we don't have any node yet, the first node we must create is the discovery node.\nThe role of this node is to provide node discovery (adding/removing/searching) for all nodes in the cluster.   Click the \"Add Node\" button as seen above and we will be redirected to a new page where we can see list of available nodes and their details.   As we can see, there are various  state_*  attributes. Each of this attribute marks the progress of node deployment.\nEventually these attributes will be marked as finished (or  true  in this context) one by one.  To see the progress of node deployment, we need to run a command in the shell:  tailf /var/log/gluuengine/node.log  Below is an example of discovery node deployment log:   Note, we cannot deploy any Gluu container in discovery node, hence we need to create another node ... the Master node.",
            "title": "Managing Discovery Node"
        },
        {
            "location": "/admin-guide/webui/#managing-master-node",
            "text": "To create master node, repeat the process. When the form is shown, choose \"Master\" in \"Type\" dropdown field.   Click the \"Add Node\" button as seen above and we will be redirected back and see there's new master node listed there.   To see the progress of the new node deployment, repeat this command in the shell:  tailf /var/log/gluuengine/node.log  Below is an example of master node deployment log:   As we already have discovery and master nodes, let's start deploying Gluu container.",
            "title": "Managing Master Node"
        },
        {
            "location": "/admin-guide/webui/#managing-containers",
            "text": "There are 2 ways to deploy container(s):   Using  New Container  button: only a single container can be selected.  Using  Scale Containers  button: deploy multiple  oxauth  containers. We will cover this feature later.    To ensure the cluster running as expected, the deployment should follow the following order:   ldap  oxauth  oxtrust  (can be deployed only in master node)  nginx   Click the \"New Container\" button and a new form will appear:   Choose \"LDAP\" in \"Container Type\" dropdown field and select existing node; in this case the \"gluu-master\" (master node). Remember, don't choose discovery node as it doesn't support Gluu container deployment.  Once the container has been created, it will be listed in a table as seen below:  Clicking the link under \"Name\" header row will show us the container's details.\nAs we can see, the  ldap  container marked as  IN_PROGRESS . That means the deployment is running (it may take a while to finish the whole process though). To see the progress, click the \"Search\" button under \"Logs\" header row.  When \"Search\" button is clicked, a new \"Setup\" button will replace the old button under \"Logs\" header row. See the screenshot below:   Click the \"Setup\" button and we will be redirected to a page where we can see the container deployment log.   To complete cluster setup, repeat the process of deploying container for  oxauth ,  oxtrust , and  nginx .   Once we have those 4 container types (all of them should be marked as SUCCESS though), we already have a basic cluster setup that should work as expected.  Let's continue to add more nodes (including license key management, scaling containers, etc.) in next sections.",
            "title": "Managing Containers"
        },
        {
            "location": "/admin-guide/webui/#managing-license-key",
            "text": "Before adding any additional  worker  node, we need to add license first by clicking the \"New License Key\" button.   A new form will appear and we need to fill all the fields.   We can use any value for \"Name\" field, but we need to match the values for \"Code\" (or \"licenseId\"), \"Public Key\", \"Public Password\", and \"License Password\" fields with license we retrieved from Gluu.   Once the license has been created, the license will be validated.\nIf the license is valid or not expired, we can continue to add more nodes and deploy containers in those new nodes.",
            "title": "Managing License Key"
        },
        {
            "location": "/admin-guide/webui/#managing-additional-worker-nodes",
            "text": "To create worker node, repeat the process of creating new node. When the form is shown, choose \"Worker\" in \"Type\" dropdown field.   Click the \"Add Node\" button as seen above and we will be redirected back and see there's new worker node listed there.   To see the progress of the new node deployment, repeat this command in the shell:  tailf /var/log/gluuengine/node.log  Below is an example of worker node deployment log:   We can add more worker nodes, but in this example we will not add them anymore. Instead let's deploy containers to worker node.",
            "title": "Managing Additional Worker Nodes"
        },
        {
            "location": "/admin-guide/webui/#managing-containers-in-worker-node",
            "text": "To deploy container in worker node, repeat the same process as we did in master node, but remember to choose the worker node in \"Node ID\" dropdown.  Below is an example of how to deploy  nginx  container in worker node:   Note: In worker node, we are only allowed to deploy  ldap ,  oxauth , and  nginx  container.",
            "title": "Managing Containers in Worker Node"
        },
        {
            "location": "/admin-guide/webui/#scaling-oxauth-container",
            "text": "To scale  oxauth  container (deploying multiple instances at once), we can use the scaling feature introduced in  gluuengine  version 0.5.0.  Let's get back to page where containers are listed. Click the \"Containers\" left pane menu and the buttons will be available as shown below:   Click the \"Scale Containers\" button and new form will appear:   In the screenshot above, we're telling the app to deploy  2 instances  of  oxAuth  container into the cluster.\nAfterwards click the \"Scale\" button and we will be redirected to list of containers page:   As we can see, there are 2 new oxAuth containers deployed in master and worker node (see the bottom 2 of the table above).  In addition, there's a counterpart of scaling feature called descaling:   The form is identical to scaling one, but we need to check the tickbox above the \"Scale\" button. What this descaling feature do is removing  n instances  of oxAuth container from the cluster.  With these scale/descale features, we can add or remove oxAuth containers easier than before.",
            "title": "Scaling oxAuth Container"
        },
        {
            "location": "/admin-guide/webui/#reviewing-cluster-setup",
            "text": "As we have multi-nodes with various containers deployed into the cluster, let's take a review of our cluster.\nTo see an overview of what our cluster looks like, click the Gluu's logo (top left corner) in the app.   We can see how many nodes deployed in the cluster.   And yes, we can see how many containers deployed in the cluster.",
            "title": "Reviewing Cluster Setup"
        },
        {
            "location": "/admin-guide/webui/#history",
            "text": "All the create requests made by the Web UI is saved in the file called   config-history.log . Each post request generate 3 lines of log:   The date and time of logging  The cUrl command equivalent of the POST request made from the web interface  The status code of the response provided by the API server   The log can be accessed from the browser at  http://localhost:8800/static/config-history.log",
            "title": "History"
        },
        {
            "location": "/admin-guide/troubleshooting/",
            "text": "Troubleshooting\n#\n\n\n\n\n\n\nTroubleshooting\n\n\nTesting the Cluster\n\n\nLog Files\n\n\nRecovering Cluster\n\n\nTransparent Huge Page in MongoDB\n\n\n\n\n\n\n\n\n\n\nTesting the Cluster\n#\n\n\nThis section will be added soon.\n\n\nLog Files\n#\n\n\nThe setup and deployment logs for the cluster container are available via Container Log API.\n\n\nExample:\n\n\n# setup log\ncurl localhost:8080/container_logs/<container-name>/setup\n\n# teardown log\ncurl localhost:8080/container_logs/<container-name>/teardown\n\n\n\nThe term \n<container-name>\n represents the currently-supported containers that are \nldap\n, \noxauth\n, \noxtrust\n, and \nnginx\n.\n\n\nRecovering Cluster\n#\n\n\nThere are instances when the cluster server may be rebooted, or for some unavoidable circumstances, the cluster server was shutdown and booted again.\n\n\nFor a detailed step by step cluster recovery see the \nRecovery Page\n.\n\n\nTransparent Huge Page in MongoDB\n#\n\n\nAs we are using MongoDB, there will be warnings about Transparent Huge Page (THP).\nIn special usecase where MongoDB is used in its own dedicated server, we should disable THP on Linux machines to ensure best performance with MongoDB.\n\n\nIn Gluu Server Docker Edition, this warning is considered as acceptable, hence we don't need to do anything to fix THP issue.\nBut in case we need it, to disable THP, we can modify \n/etc/rc.local\n and add the following lines,\nright before the last line (\nexit 0\n):\n\n\nif test -f /sys/kernel/mm/transparent_hugepage/defrag; then\n    echo never > /sys/kernel/mm/transparent_hugepage/defrag\nfi\nif test -f /sys/kernel/mm/transparent_hugepage/enabled; then\n    echo never > /sys/kernel/mm/transparent_hugepage/enabled\nfi\n\n\n\n\nRun this command once to make sure THP config is modified without restarting the server:\n\n\n/etc/rc.local",
            "title": "Troubleshooting"
        },
        {
            "location": "/admin-guide/troubleshooting/#troubleshooting",
            "text": "Troubleshooting  Testing the Cluster  Log Files  Recovering Cluster  Transparent Huge Page in MongoDB",
            "title": "Troubleshooting"
        },
        {
            "location": "/admin-guide/troubleshooting/#testing-the-cluster",
            "text": "This section will be added soon.",
            "title": "Testing the Cluster"
        },
        {
            "location": "/admin-guide/troubleshooting/#log-files",
            "text": "The setup and deployment logs for the cluster container are available via Container Log API.  Example:  # setup log\ncurl localhost:8080/container_logs/<container-name>/setup\n\n# teardown log\ncurl localhost:8080/container_logs/<container-name>/teardown  The term  <container-name>  represents the currently-supported containers that are  ldap ,  oxauth ,  oxtrust , and  nginx .",
            "title": "Log Files"
        },
        {
            "location": "/admin-guide/troubleshooting/#recovering-cluster",
            "text": "There are instances when the cluster server may be rebooted, or for some unavoidable circumstances, the cluster server was shutdown and booted again.  For a detailed step by step cluster recovery see the  Recovery Page .",
            "title": "Recovering Cluster"
        },
        {
            "location": "/admin-guide/troubleshooting/#transparent-huge-page-in-mongodb",
            "text": "As we are using MongoDB, there will be warnings about Transparent Huge Page (THP).\nIn special usecase where MongoDB is used in its own dedicated server, we should disable THP on Linux machines to ensure best performance with MongoDB.  In Gluu Server Docker Edition, this warning is considered as acceptable, hence we don't need to do anything to fix THP issue.\nBut in case we need it, to disable THP, we can modify  /etc/rc.local  and add the following lines,\nright before the last line ( exit 0 ):  if test -f /sys/kernel/mm/transparent_hugepage/defrag; then\n    echo never > /sys/kernel/mm/transparent_hugepage/defrag\nfi\nif test -f /sys/kernel/mm/transparent_hugepage/enabled; then\n    echo never > /sys/kernel/mm/transparent_hugepage/enabled\nfi  Run this command once to make sure THP config is modified without restarting the server:  /etc/rc.local",
            "title": "Transparent Huge Page in MongoDB"
        },
        {
            "location": "/admin-guide/recovery/",
            "text": "Recovery Overview\n#\n\n\nA provider may crashes due to various reasons (i.e. power outage).\nWhen it crashes, all containers will crash as well.\n\n\nVersion 0.5.0 and Above\n#\n\n\nStarting from v0.5.0, we have simplified the \nscript\n\nwhich is installed during node creation.\nTo run this script, simply execute \nsupervisorctl restart recovery\n in the shell.\n\n\nOlder Releases\n#\n\n\nAs of v0.3.3-12, recovery script is moved to Gluu Agent package.\nRefer to installation section to install the package for \nmaster\n and \nconsumer\n provider.\n\n\nOne of Gluu Agent jobs is to recover nodes automatically after provider is rebooted.\nWe can also recover the provider manually using the following command:\n\n\ngluu-agent recover\n\n\n\nThe recovery process is logged to stdout by default. We can store the log into a file by passing \n--logfile\n option.\n\n\ngluu-agent recover --logfile /var/log/gluuagent-recover.log\n\n\n\nNote, Gluu Agent relies on local cluster data that is pushed by \ngluu-flask\n v0.3.3-12 to each provider,\nhence it is recommended to upgrade to \ngluu-flask\n v0.3.3-12.",
            "title": "Recovery"
        },
        {
            "location": "/admin-guide/recovery/#recovery-overview",
            "text": "A provider may crashes due to various reasons (i.e. power outage).\nWhen it crashes, all containers will crash as well.",
            "title": "Recovery Overview"
        },
        {
            "location": "/admin-guide/recovery/#version-050-and-above",
            "text": "Starting from v0.5.0, we have simplified the  script \nwhich is installed during node creation.\nTo run this script, simply execute  supervisorctl restart recovery  in the shell.",
            "title": "Version 0.5.0 and Above"
        },
        {
            "location": "/admin-guide/recovery/#older-releases",
            "text": "As of v0.3.3-12, recovery script is moved to Gluu Agent package.\nRefer to installation section to install the package for  master  and  consumer  provider.  One of Gluu Agent jobs is to recover nodes automatically after provider is rebooted.\nWe can also recover the provider manually using the following command:  gluu-agent recover  The recovery process is logged to stdout by default. We can store the log into a file by passing  --logfile  option.  gluu-agent recover --logfile /var/log/gluuagent-recover.log  Note, Gluu Agent relies on local cluster data that is pushed by  gluu-flask  v0.3.3-12 to each provider,\nhence it is recommended to upgrade to  gluu-flask  v0.3.3-12.",
            "title": "Older Releases"
        },
        {
            "location": "/admin-guide/migration/",
            "text": "Migration\n#\n\n\n\n\n\n\nMigration\n\n\nVersion 0.5.0\n\n\nVersion 0.4.4\n\n\nMaster provider\n\n\n\n\n\n\nVersion 0.4.3\n\n\nMaster provider\n\n\nConsumer provider\n\n\n\n\n\n\nVersion 0.4.2\n\n\nMaster provider\n\n\nConsumer provider\n\n\n\n\n\n\nVersion 0.4.1-8 and above\n\n\nMaster provider\n\n\nConsumer provider\n\n\n\n\n\n\nVersion 0.4.1\n\n\nMaster provider\n\n\nConsumer provider\n\n\n\n\n\n\nVersion 0.4.0\n\n\nMaster provider\n\n\nConsumer provider\n\n\n\n\n\n\nVersion 0.3.3-12 and above\n\n\n\n\n\n\n\n\n\n\nVersion 0.5.0\n#\n\n\nChangelog for v0.5.0 is available \nhere\n.\n\n\nAs version 0.5.0 is not backward compatible with older releases, to migrate to the new version,\nuser need to backup necessary data (mainly LDAP data) and reinstall everything from scratch.\n\n\nVersion 0.4.4\n#\n\n\nChangelog for v0.4.4 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nInstall latest \ngluu-flask\n package updates:\n\n\napt-get update && apt-get install -y gluu-flask\n\n\n\n\n\n\n\nPopulate node's logs by running this command:\n\n\ngluuapi populate-node-logs\n\n\n\nThe command above will populate paths to all nodes logs in the cluster.\n\n\n\n\n\n\nVersion 0.4.3\n#\n\n\nChangelog for v0.4.3 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nInstall latest \ngluu-flask\n and \ngluu-agent\n package updates:\n\n\napt-get update && apt-get install -y gluu-flask gluu-agent\n\n\n\n\n\n\n\nPopulate node's logs by running this command:\n\n\ngluuapi populate-node-logs\n\n\n\nThe command above will populate paths to all nodes logs in the cluster.\n\n\n\n\n\n\nConsumer provider\n#\n\n\n\n\nInstall latest \ngluu-agent\n package updates:\napt-get update && apt-get install -y gluu-agent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norigin/master\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersion 0.4.2\n#\n\n\nChangelog for v0.4.2 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nInstall latest \ngluu-flask\n and \ngluu-agent\n package updates:\n\n\napt-get update && apt-get install -y gluu-flask gluu-agent\n\n\n\n\n\n\n\nRemove oxauth, oxidp (if any), and nginx nodes.\n\n\n\n\n\n\nRemove gluuoxauth, gluuoxidp, and gluunginx images.\n\n\ndocker rmi gluuoxauth gluuoxidp gluunginx\n\n\n\n\n\n\n\nRe-deploy oxauth, nginx, and oxidp (optional) nodes.\n\n\n\n\n\n\nLogin to ldap node:\n\n\ndocker exec -ti $node_id bash\n\n\n\nAfterwards, add new config:\n\n\n/opt/opendj/bin/dsconfig \\\n    --trustAll \\\n    --no-prompt \\\n    --bindDN 'cn=Directory Manager' \\\n    --bindPassword $passwd \\\n    set-global-configuration-prop --set reject-unauthenticated-requests:true\n\n\n\n\n\n\n\nConsumer provider\n#\n\n\n\n\n\n\nInstall latest \ngluu-agent\n package updates:\n\n\napt-get update && apt-get install -y gluu-agent\n\n\n\n\n\n\n\nRemove oxauth, oxidp (if any), and nginx nodes.\n\n\n\n\n\n\nRemove gluuoxauth, gluuoxidp, and gluunginx images.\n\n\ndocker rmi gluuoxauth gluuoxidp gluunginx\n\n\n\n\n\n\n\nRe-deploy oxauth, nginx, and oxidp (optional) nodes.\n\n\n\n\n\n\nLogin to ldap node:\n\n\ndocker exec -ti $node_id bash\n\n\n\nAfterwards, add new config:\n\n\n/opt/opendj/bin/dsconfig \\\n    --trustAll \\\n    --no-prompt \\\n    --bindDN 'cn=Directory Manager' \\\n    --bindPassword $passwd \\\n    set-global-configuration-prop --set reject-unauthenticated-requests:true\n\n\n\n\n\n\n\nVersion 0.4.1-8 and above\n#\n\n\nChangelog for v0.4.1 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nInstall latest \ngluu-flask\n package updates:\n\n\napt-get update && apt-get install -y gluu-flask\n\n\n\n\n\n\n\nRemove existing ldap, oxauth, oxtrust, and oxidp nodes.\n\n\n\n\n\n\nRemove gluuopendj, gluuoxtrust, gluuoxidp, and gluuoxauth images:\n\n\ndocker rmi gluuopendj gluuoxtrust gluuoxidp gluuoxauth\n\n\n\n\n\n\n\nRe-deploy ldap, oxauth, oxidp (optional), and oxtrust nodes.\n\n\n\n\n\n\nConsumer provider\n#\n\n\n\n\nRemove existing ldap, oxauth, and oxidp nodes.\n\n\n\n\nRemove gluuopendj, gluuoxidp, and gluuoxauth images:\n\n\ndocker rmi gluuopendj gluuoxidp gluuoxauth\n\n\n\n\n\n\n\nRe-deploy ldap, oxauth, and optionally oxidp nodes.\n\n\n\n\n\n\nVersion 0.4.1\n#\n\n\nChangelog for v0.4.1 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nUpdate \ngluu-master\n, \ngluu-flask\n, and \ngluu-agent\n packages.\n\n\napt-get update && apt-get install -y gluu-master gluu-flask gluu-agent\n\n\n\nNote: since newer \ngluu-master\n package introduces docker v1.8.3, existing nodes might be\ncrashed. To recover the nodes, run the recovery command:\n\n\ngluu-agent recover\n\n\n\n\n\n\n\nConsumer provider\n#\n\n\n\n\n\n\nUpdate \ngluu-consumer\n and \ngluu-agent\n packages.\n\n\napt-get update && apt-get install -y gluu-consumer gluu-agent\n\n\n\nNote: since newer \ngluu-consumer\n package introduces docker v1.8.3, existing nodes might be\ncrashed. To recover the nodes, run the recovery command:\n\n\ngluu-agent recover\n\n\n\n\n\n\n\nVersion 0.4.0\n#\n\n\nChangelog for v0.4.0 is available \nhere\n.\n\n\nMaster provider\n#\n\n\n\n\n\n\nUpdate \ngluu-flask\n, \ngluu-agent\n and \nweave\n packages:\n\n\napt-get update && apt-get install -y gluu-flask gluu-agent weave\n\n\n\n\n\n\n\nRemove old weave container:\n\n\ndocker rm -f weave\n\n\n\n\n\n\n\nUpdate weave image:\n\n\nweave setup\n\n\n\n\n\n\n\nUpdate master provider data via REST API/Web UI.\n\n\n\n\n\n\nRemove existing ldap, oxauth, httpd and oxtrust nodes (containers).\n\n\n\n\n\n\nRemove gluuopendj, gluuoxtrust, and gluuoxauth images:\n\n\ndocker rmi gluuopendj gluuoxtrust gluuoxauth\n\n\n\n\n\n\n\nRe-deploy ldap, oxauth, oxidp (optional), nginx, and oxtrust nodes.\n\n\n\n\n\n\nConsumer provider\n#\n\n\n\n\n\n\nUpdate \ngluu-agent\n and \nweave\n packages:\n\n\napt-get update && apt-get install -y gluu-agent weave\n\n\n\n\n\n\n\nRemove old weave container:\n\n\ndocker rm -f weave\n\n\n\n\n\n\n\nUpdate weave image:\n\n\nweave setup\n\n\n\n\n\n\n\nUpdate consumer provider data via REST API/Web UI.\n\n\n\n\n\n\nRemove existing ldap, oxauth, and httpd nodes (containers).\n\n\n\n\n\n\nRemove gluuopendj and gluuoxauth images:\n\n\ndocker rmi gluuopendj gluuoxauth\n\n\n\n\n\n\n\nRe-deploy ldap, oxauth, oxidp (optional), and nginx nodes.\n\n\n\n\n\n\nVersion 0.3.3-12 and above\n#\n\n\nChangelog for v0.3.3 is available \nhere\n.\n\n\nSteps to migrate to Gluu Cluster v0.3.3-12:\n\n\n\n\nUpdate \ngluu-flask\n via \napt-get update && apt-get install -y gluu-flask\n.\n\n\nRemove ldap, oxauth, httpd and oxtrust nodes (containers).\n\n\nRemove gluuoxauth and gluuoxtrust images via \ndocker rmi\n command.\n\n\nRe-deploy ldap, oxauth, httpd, and oxtrust nodes.\n\n\nInstall gluu-agent: \napt-get update && apt-get install gluu-agent\n.",
            "title": "Migration"
        },
        {
            "location": "/admin-guide/migration/#migration",
            "text": "Migration  Version 0.5.0  Version 0.4.4  Master provider    Version 0.4.3  Master provider  Consumer provider    Version 0.4.2  Master provider  Consumer provider    Version 0.4.1-8 and above  Master provider  Consumer provider    Version 0.4.1  Master provider  Consumer provider    Version 0.4.0  Master provider  Consumer provider    Version 0.3.3-12 and above",
            "title": "Migration"
        },
        {
            "location": "/admin-guide/migration/#version-050",
            "text": "Changelog for v0.5.0 is available  here .  As version 0.5.0 is not backward compatible with older releases, to migrate to the new version,\nuser need to backup necessary data (mainly LDAP data) and reinstall everything from scratch.",
            "title": "Version 0.5.0"
        },
        {
            "location": "/admin-guide/migration/#version-044",
            "text": "Changelog for v0.4.4 is available  here .",
            "title": "Version 0.4.4"
        },
        {
            "location": "/admin-guide/migration/#master-provider",
            "text": "Install latest  gluu-flask  package updates:  apt-get update && apt-get install -y gluu-flask    Populate node's logs by running this command:  gluuapi populate-node-logs  The command above will populate paths to all nodes logs in the cluster.",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#version-043",
            "text": "Changelog for v0.4.3 is available  here .",
            "title": "Version 0.4.3"
        },
        {
            "location": "/admin-guide/migration/#master-provider_1",
            "text": "Install latest  gluu-flask  and  gluu-agent  package updates:  apt-get update && apt-get install -y gluu-flask gluu-agent    Populate node's logs by running this command:  gluuapi populate-node-logs  The command above will populate paths to all nodes logs in the cluster.",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#consumer-provider",
            "text": "Install latest  gluu-agent  package updates: apt-get update && apt-get install -y gluu-agent         origin/master",
            "title": "Consumer provider"
        },
        {
            "location": "/admin-guide/migration/#version-042",
            "text": "Changelog for v0.4.2 is available  here .",
            "title": "Version 0.4.2"
        },
        {
            "location": "/admin-guide/migration/#master-provider_2",
            "text": "Install latest  gluu-flask  and  gluu-agent  package updates:  apt-get update && apt-get install -y gluu-flask gluu-agent    Remove oxauth, oxidp (if any), and nginx nodes.    Remove gluuoxauth, gluuoxidp, and gluunginx images.  docker rmi gluuoxauth gluuoxidp gluunginx    Re-deploy oxauth, nginx, and oxidp (optional) nodes.    Login to ldap node:  docker exec -ti $node_id bash  Afterwards, add new config:  /opt/opendj/bin/dsconfig \\\n    --trustAll \\\n    --no-prompt \\\n    --bindDN 'cn=Directory Manager' \\\n    --bindPassword $passwd \\\n    set-global-configuration-prop --set reject-unauthenticated-requests:true",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#consumer-provider_1",
            "text": "Install latest  gluu-agent  package updates:  apt-get update && apt-get install -y gluu-agent    Remove oxauth, oxidp (if any), and nginx nodes.    Remove gluuoxauth, gluuoxidp, and gluunginx images.  docker rmi gluuoxauth gluuoxidp gluunginx    Re-deploy oxauth, nginx, and oxidp (optional) nodes.    Login to ldap node:  docker exec -ti $node_id bash  Afterwards, add new config:  /opt/opendj/bin/dsconfig \\\n    --trustAll \\\n    --no-prompt \\\n    --bindDN 'cn=Directory Manager' \\\n    --bindPassword $passwd \\\n    set-global-configuration-prop --set reject-unauthenticated-requests:true",
            "title": "Consumer provider"
        },
        {
            "location": "/admin-guide/migration/#version-041-8-and-above",
            "text": "Changelog for v0.4.1 is available  here .",
            "title": "Version 0.4.1-8 and above"
        },
        {
            "location": "/admin-guide/migration/#master-provider_3",
            "text": "Install latest  gluu-flask  package updates:  apt-get update && apt-get install -y gluu-flask    Remove existing ldap, oxauth, oxtrust, and oxidp nodes.    Remove gluuopendj, gluuoxtrust, gluuoxidp, and gluuoxauth images:  docker rmi gluuopendj gluuoxtrust gluuoxidp gluuoxauth    Re-deploy ldap, oxauth, oxidp (optional), and oxtrust nodes.",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#consumer-provider_2",
            "text": "Remove existing ldap, oxauth, and oxidp nodes.   Remove gluuopendj, gluuoxidp, and gluuoxauth images:  docker rmi gluuopendj gluuoxidp gluuoxauth    Re-deploy ldap, oxauth, and optionally oxidp nodes.",
            "title": "Consumer provider"
        },
        {
            "location": "/admin-guide/migration/#version-041",
            "text": "Changelog for v0.4.1 is available  here .",
            "title": "Version 0.4.1"
        },
        {
            "location": "/admin-guide/migration/#master-provider_4",
            "text": "Update  gluu-master ,  gluu-flask , and  gluu-agent  packages.  apt-get update && apt-get install -y gluu-master gluu-flask gluu-agent  Note: since newer  gluu-master  package introduces docker v1.8.3, existing nodes might be\ncrashed. To recover the nodes, run the recovery command:  gluu-agent recover",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#consumer-provider_3",
            "text": "Update  gluu-consumer  and  gluu-agent  packages.  apt-get update && apt-get install -y gluu-consumer gluu-agent  Note: since newer  gluu-consumer  package introduces docker v1.8.3, existing nodes might be\ncrashed. To recover the nodes, run the recovery command:  gluu-agent recover",
            "title": "Consumer provider"
        },
        {
            "location": "/admin-guide/migration/#version-040",
            "text": "Changelog for v0.4.0 is available  here .",
            "title": "Version 0.4.0"
        },
        {
            "location": "/admin-guide/migration/#master-provider_5",
            "text": "Update  gluu-flask ,  gluu-agent  and  weave  packages:  apt-get update && apt-get install -y gluu-flask gluu-agent weave    Remove old weave container:  docker rm -f weave    Update weave image:  weave setup    Update master provider data via REST API/Web UI.    Remove existing ldap, oxauth, httpd and oxtrust nodes (containers).    Remove gluuopendj, gluuoxtrust, and gluuoxauth images:  docker rmi gluuopendj gluuoxtrust gluuoxauth    Re-deploy ldap, oxauth, oxidp (optional), nginx, and oxtrust nodes.",
            "title": "Master provider"
        },
        {
            "location": "/admin-guide/migration/#consumer-provider_4",
            "text": "Update  gluu-agent  and  weave  packages:  apt-get update && apt-get install -y gluu-agent weave    Remove old weave container:  docker rm -f weave    Update weave image:  weave setup    Update consumer provider data via REST API/Web UI.    Remove existing ldap, oxauth, and httpd nodes (containers).    Remove gluuopendj and gluuoxauth images:  docker rmi gluuopendj gluuoxauth    Re-deploy ldap, oxauth, oxidp (optional), and nginx nodes.",
            "title": "Consumer provider"
        },
        {
            "location": "/admin-guide/migration/#version-033-12-and-above",
            "text": "Changelog for v0.3.3 is available  here .  Steps to migrate to Gluu Cluster v0.3.3-12:   Update  gluu-flask  via  apt-get update && apt-get install -y gluu-flask .  Remove ldap, oxauth, httpd and oxtrust nodes (containers).  Remove gluuoxauth and gluuoxtrust images via  docker rmi  command.  Re-deploy ldap, oxauth, httpd, and oxtrust nodes.  Install gluu-agent:  apt-get update && apt-get install gluu-agent .",
            "title": "Version 0.3.3-12 and above"
        },
        {
            "location": "/admin-guide/known-issues/",
            "text": "Known Issues\n#\n\n\n\n\n\n\nKnown Issues\n\n\nUnsupported Kernel\n\n\n\n\n\n\n\n\n\n\nUnsupported Kernel\n#\n\n\n\n\n\n\nThe Enterprise Edition does not work well when using \nkernel 3.13.0-77\n.\n    One of the symptoms is high CPU usage due to Java process turned into zombie process.\n    We can check whether this issue occurs in our server:\n\n\nps -ef | grep defunct\n\n\n\nIf we see a Java process with \n<defunct>\n status, then we're hit by this issue.\n\n\nA workaround is to upgrade or downgrade the kernel. Some supported (and tested) kernel versions:\n\n\n\n\n3.13.0-71\n\n\n3.13.0-79\n\n\n3.16\n\n\nand many more",
            "title": "Known Issues"
        },
        {
            "location": "/admin-guide/known-issues/#known-issues",
            "text": "Known Issues  Unsupported Kernel",
            "title": "Known Issues"
        },
        {
            "location": "/admin-guide/known-issues/#unsupported-kernel",
            "text": "The Enterprise Edition does not work well when using  kernel 3.13.0-77 .\n    One of the symptoms is high CPU usage due to Java process turned into zombie process.\n    We can check whether this issue occurs in our server:  ps -ef | grep defunct  If we see a Java process with  <defunct>  status, then we're hit by this issue.  A workaround is to upgrade or downgrade the kernel. Some supported (and tested) kernel versions:   3.13.0-71  3.13.0-79  3.16  and many more",
            "title": "Unsupported Kernel"
        },
        {
            "location": "/reference/api/cluster/",
            "text": "Cluster API\n\n\nOverview\n\n\nCreate New Cluster\n\n\nGet A Cluster\n\n\nList All Clusters\n\n\nDelete A Cluster\n\n\n\n\n\n\n\n\n\n\nCluster API\n#\n\n\nOverview\n#\n\n\nCluster holds all \ndocker\n containers within \nweave\n network.\n\n\n\n\nCreate New Cluster\n#\n\n\nPOST /clusters\n\n\n\nNote, currently the API only allow 1 cluster. This may change in the future.\n\n\nURL:\n\n\nhttp://localhost:8080/clusters\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nThe name of the cluster.\n\n\nRules:\n\n\n\n\nMinimum 3 characters.\n\n\nAccepts alphanumeric (case-insensitive), dash, underscore, and dot characters.\n\n\nCannot use dash, underscore, or dot as leading or traling character.\n\n\n\n\n\n\n\n\ndescription\n (optional)\n\n\n\n\n\n\norg_name\n (required)\n\n\nOrganization name for X.509 certificate.\n\n\n\n\n\n\norg_short_name\n (required)\n\n\nOrganization short name for X.509 certificate.\n\n\n\n\n\n\ncity\n (required)\n\n\nCity for X.509 certificate.\n\n\n\n\n\n\nstate\n (required)\n\n\nState or province name for X.509 certificate.\n\n\n\n\n\n\ncountry_code\n (required)\n\n\nISO 3166-1 alpha-2 country code.\n\n\n\n\n\n\nadmin_email\n (required)\n\n\nAdmin email address for X.509 certificate.\n\n\n\n\n\n\nox_cluster_hostname\n (required)\n\n\nDomain name to use for the admin interface website.\n\n\n\n\n\n\nadmin_pw\n (required)\n\n\nDefault password for default Admin account. Minimum password length is 6 characters.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/clusters \\\n    -d name=cluster1 \\\n    -d org_name=my-org \\\n    -d org_short_name=my-org \\\n    -d city=Austin \\\n    -d state=TX \\\n    -d country_code=US \\\n    -d admin_email='info@example.com' \\\n    -d ox_cluster_hostname=ox.example.com \\\n    -d admin_pw=secret \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"ox.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}\n\n\n\n\nStatus Code:\n\n\n\n\n201\n: Cluster is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied. Possibly unable to create more cluster.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Cluster\n#\n\n\nGET /clusters/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/clusters/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"ox.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Cluster is exist.\n\n\n404\n: Cluster is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All Clusters\n#\n\n\nGET /clusters\n\n\nURL:\n\n\nhttp://localhost:8080/clusters\n\n\nRequest example:\n\n\ncurl http://localhost:8080/clusters -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n        \"oxauth_containers\": [],\n        \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n        \"admin_email\": \"info@example.com\",\n        \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n        \"description\": null,\n        \"city\": \"Austin\",\n        \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n        \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n        \"ldaps_port\": \"1637\",\n        \"ox_cluster_hostname\": \"ox.example.com\",\n        \"state\": \"TX\",\n        \"country_code\": \"US\",\n        \"ldap_containers\": [],\n        \"nginx_containers\": [],\n        \"org_short_name\": \"my-org\",\n        \"org_name\": \"my-org\",\n        \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n        \"oxtrust_containers\": [],\n        \"name\": \"cluster1\",\n        \"oxidp_containers\": []\n    }\n]\n\n\n\n\nNote, if there's no cluster, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A Cluster\n#\n\n\nDELETE /clusters/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/clusters/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\n\n\n\n\nStatus Code:\n\n\n\n\n204\n: Cluster has been deleted.\n\n\n403\n: Access denied.\n\n\n404\n: Cluster is not exist.\n\n\n500\n: The server having errors.",
            "title": "Cluster"
        },
        {
            "location": "/reference/api/cluster/#cluster-api",
            "text": "",
            "title": "Cluster API"
        },
        {
            "location": "/reference/api/cluster/#overview",
            "text": "Cluster holds all  docker  containers within  weave  network.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/cluster/#create-new-cluster",
            "text": "POST /clusters  Note, currently the API only allow 1 cluster. This may change in the future.  URL:  http://localhost:8080/clusters  Form parameters:    name  (required)  The name of the cluster.  Rules:   Minimum 3 characters.  Accepts alphanumeric (case-insensitive), dash, underscore, and dot characters.  Cannot use dash, underscore, or dot as leading or traling character.     description  (optional)    org_name  (required)  Organization name for X.509 certificate.    org_short_name  (required)  Organization short name for X.509 certificate.    city  (required)  City for X.509 certificate.    state  (required)  State or province name for X.509 certificate.    country_code  (required)  ISO 3166-1 alpha-2 country code.    admin_email  (required)  Admin email address for X.509 certificate.    ox_cluster_hostname  (required)  Domain name to use for the admin interface website.    admin_pw  (required)  Default password for default Admin account. Minimum password length is 6 characters.    Request example:  curl http://localhost:8080/clusters \\\n    -d name=cluster1 \\\n    -d org_name=my-org \\\n    -d org_short_name=my-org \\\n    -d city=Austin \\\n    -d state=TX \\\n    -d country_code=US \\\n    -d admin_email='info@example.com' \\\n    -d ox_cluster_hostname=ox.example.com \\\n    -d admin_pw=secret \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"ox.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}  Status Code:   201 : Cluster is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied. Possibly unable to create more cluster.  500 : The server having errors.",
            "title": "Create New Cluster"
        },
        {
            "location": "/reference/api/cluster/#get-a-cluster",
            "text": "GET /clusters/{id}  URL:  http://localhost:8080/clusters/{id}  Request example:  curl http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n    \"oxauth_containers\": [],\n    \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n    \"admin_email\": \"info@example.com\",\n    \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n    \"description\": null,\n    \"city\": \"Austin\",\n    \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n    \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n    \"ldaps_port\": \"1636\",\n    \"ox_cluster_hostname\": \"ox.example.com\",\n    \"state\": \"TX\",\n    \"country_code\": \"US\",\n    \"ldap_containers\": [],\n    \"nginx_containers\": [],\n    \"org_short_name\": \"my-org\",\n    \"org_name\": \"my-org\",\n    \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n    \"oxtrust_containers\": [],\n    \"name\": \"cluster1\",\n    \"oxidp_containers\": []\n}  Status Code:   200 : Cluster is exist.  404 : Cluster is not exist.  500 : The server having errors.",
            "title": "Get A Cluster"
        },
        {
            "location": "/reference/api/cluster/#list-all-clusters",
            "text": "GET /clusters  URL:  http://localhost:8080/clusters  Request example:  curl http://localhost:8080/clusters -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"inum_org\": \"@!FDF8.652A.6EFF.F5A3!0001!DA7B.9EB2\",\n        \"oxauth_containers\": [],\n        \"inum_appliance\": \"@!FDF8.652A.6EFF.F5A3!0002!FA83.4368\",\n        \"admin_email\": \"info@example.com\",\n        \"inum_appliance_fn\": \"FDF8652A6EFFF5A30002FA834368\",\n        \"description\": null,\n        \"city\": \"Austin\",\n        \"base_inum\": \"@!FDF8.652A.6EFF.F5A3\",\n        \"inum_org_fn\": \"FDF8652A6EFFF5A30001DA7B9EB2\",\n        \"ldaps_port\": \"1637\",\n        \"ox_cluster_hostname\": \"ox.example.com\",\n        \"state\": \"TX\",\n        \"country_code\": \"US\",\n        \"ldap_containers\": [],\n        \"nginx_containers\": [],\n        \"org_short_name\": \"my-org\",\n        \"org_name\": \"my-org\",\n        \"id\": \"1279de28-b6d0-4052-bd0c-cc46a6fd5f9f\",\n        \"oxtrust_containers\": [],\n        \"name\": \"cluster1\",\n        \"oxidp_containers\": []\n    }\n]  Note, if there's no cluster, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All Clusters"
        },
        {
            "location": "/reference/api/cluster/#delete-a-cluster",
            "text": "DELETE /clusters/{id}  URL:  http://localhost:8080/clusters/{id}  Request example:  curl http://localhost:8080/clusters/1279de28-b6d0-4052-bd0c-cc46a6fd5f9f -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json  Status Code:   204 : Cluster has been deleted.  403 : Access denied.  404 : Cluster is not exist.  500 : The server having errors.",
            "title": "Delete A Cluster"
        },
        {
            "location": "/reference/api/provider/",
            "text": "Provider API\n\n\nOverview\n\n\nCreate New Provider\n\n\nDigitalOcean Provider\n\n\nGeneric Provider\n\n\nAWS Provider\n\n\n\n\n\n\nGet A Provider\n\n\nList All Providers\n\n\nFilter Providers\n\n\nDelete A Provider\n\n\n\n\n\n\n\n\n\n\nProvider API\n#\n\n\nOverview\n#\n\n\nProvider is an entity represents a service that provides server. An example of provider is a cloud service.\nCurrently, there are various supported provider types:\n\n\n\n\nDigitalOcean\n.\n\n\nAWS\n.\n\n\nGeneric; this is a \nBring Your Own Provider\n style. This should be used if none of any provider mentioned above is selected.\n\n\n\n\n\n\nCreate New Provider\n#\n\n\nAny supported provider type can be created by sending a request to \n/providers/{type}\n URL, where \n{type}\n is the name of provider type mentioned above.\n\n\nDigitalOcean Provider\n#\n\n\nPOST /providers/digitalocean\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers/digitalocean\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nA unique name of the provider.\n\n\n\n\n\n\ndigitalocean_access_token\n (required)\n\n\nDigitalOcean access token.\n\n\n\n\n\n\ndigitalocean_backups\n\n\nEnable or disable backup for DigitalOcean droplet (turned off by default).\n\n\n\n\n\n\ndigitalocean_private_networking\n\n\nEnable or disable private networking for DigitalOcean droplet (turned off by default).\n\n\n\n\n\n\ndigitalocean_region\n (required)\n\n\nRegion where droplet is hosted.\n\n\nSupported region:\n\n\n\n\nnyc1\n: New York 1\n\n\nnyc2\n: New York 2\n\n\nnyc3\n: New York 3\n\n\nams2\n: Amsterdam 2\n\n\nams3\n: Amsterdam 3\n\n\nsgp1\n: Singapore 1\n\n\nlon1\n: London 1\n\n\nsfo1\n: San Fransisco 1\n\n\ntor1\n: Toronto 1\n\n\nfra1\n: Frankfurt 1\n\n\n\n\n\n\n\n\ndigitalocean_size\n\n\nDigitalOcean droplet size.\n\n\nSupported size:\n\n\n\n\n512mb\n (1 CPU)\n\n\n1gb\n (1 CPU)\n\n\n2gb\n (2 CPUs)\n\n\n4gb\n (2 CPUs); this is the minimum recommended size hence it is set by default.\n\n\n8gb\n (4 CPUs)\n\n\n16gb\n (8 CPUs)\n\n\n32gb\n (12 CPUs)\n\n\n48gb\n (16 CPUs)\n\n\n64gb\n (20 CPUs)\n\n\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/providers/digitalocean \\\n    -d name=my-do-provider \\\n    -d digitalocean_access_token=random-token \\\n    -d digitalocean_region=nyc3 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\n\n{\n    \"digitalocean_access_token\": \"random-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"my-do-provider\",\n}\n\n\n\n\nPlease note, \ndriver\n is also known as provider type.\n\n\nStatus Code:\n\n\n\n\n201\n: Provider is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n500\n: The server having errors.\n\n\n\n\nGeneric Provider\n#\n\n\nPOST /providers/generic\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers/generic\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nA unique name of the provider.\n\n\n\n\n\n\ngeneric_ip_address\n (required)\n\n\nIP address of remote machine.\n\n\n\n\n\n\ngeneric_ssh_key\n (required)\n\n\nAbsolute path to private key used for SSH connection.\n\n\n\n\n\n\ngeneric_ssh_user\n (required)\n\n\nSSH user used for SSH connection.\n\n\n\n\n\n\ngeneric_ssh_port\n (required)\n\n\nPort used for SSH connection.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/providers/digitalocean \\\n    -d name=my-gen-provider \\\n    -d generic_ip_address=172.10.10.10 \\\n    -d generic_ssh_key=/home/johndoe/.ssh/id_rsa \\\n    -d generic_ssh_user=root \\\n    -d generic_ssh_port=22 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/17f9f346-0d28-45f1-96a0-49473cc21769\n\n{\n    \"driver\": \"generic\",\n    \"generic_ip_address\": \"172.10.10.10\",\n    \"generic_ssh_key\": \"/home/johndoe/.ssh/id_rsa\",\n    \"generic_ssh_port\": 22,\n    \"generic_ssh_user\": \"root\",\n    \"id\": \"17f9f346-0d28-45f1-96a0-49473cc21769\",\n    \"name\": \"my-gen-provider\",\n}\n\n\n\n\nPlease note, \ndriver\n is also known as provider type.\n\n\nStatus Code:\n\n\n\n\n201\n: Provider is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n500\n: The server having errors.\n\n\n\n\nAWS Provider\n#\n\n\nPOST /providers/aws\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers/aws\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nA unique name of the provider.\n\n\n\n\n\n\namazonec2_access_key\n (required)\n\n\nAccess key of aws cloud service.\n\n\n\n\n\n\namazonec2_secret_key\n (required)\n\n\nSecret key of aws cloud service.\n\n\n\n\n\n\namazonec2_region\n (required)\n\n\nRegion where vm is hosted.\n\n\nSupported region:\n\n\n\n\nus-east-1\n: US East (N. Virginia)\n\n\nus-west-2\n: US West (Oregon)\n\n\nus-west-1\n: US West (N. California)\n\n\neu-west-1\n: EU (Ireland)\n\n\neu-central-1\n: EU (Frankfurt)\n\n\nap-southeast-1\n: Asia Pacific (Singapore)\n\n\nap-northeast-1\n: Asia Pacific (Tokyo)\n\n\nap-southeast-2\n: Asia Pacific (Sydney)\n\n\nap-northeast-2\n: Asia Pacific (Seoul)\n\n\nsa-east-1\n: South America (S\u00e3o Paulo)\n\n\n\n\n\n\n\n\namazonec2_instance_type\n\n\nAWS instance type.\n\n\nSupported types:\n\n\n\n\nt2.micro\n\n\nm4.large\n\n\nm4.xlarge\n\n\nm4.2xlarge\n\n\nm4.4xlarge\n\n\nm4.10xlarge\n\n\n\n\n\n\n\n\namazonec2_private_address_only\n\n\nEnable or disable private networking for AWS VM (turned off by default). \n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/providers/aws \\\n    -d name=my-aws-provider \\\n    -d amazonec2_access_key=xx-xx-xx \\\n    -d amazonec2_secret_key=xx-xx-xx \\\n    -d amazonec2_region=us-east-1 \\\n    -d amazonec2_instance_type=t2.micro \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/17f9f346-0d28-45f1-96a0-49473cc21769\n\n{\n    \"driver\": \"amazonec2\",\n    \"id\": \"9234f346-0d28-45f1-67a0-49473cc897xx\",\n    \"name\": \"my-aws-provider\",\n    \"amazonec2_access_key\": \"xx-xx-xx\",\n    \"amazonec2_secret_key\": \"xx-xx-xx\",\n    \"amazonec2_ami\": \"ami-5f709f34\",\n    \"amazonec2_instance_type\": \"t2.micro\",\n    \"amazonec2_region\": \"us-east-1\",\n    \"amazonec2_private_address_only\": \"false\",\n}\n\n\n\n\nStatus Code:\n\n\n\n\n201\n: Provider is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Provider\n#\n\n\nGET /providers/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"digitalocean_access_token\": \"random-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"my-do-provider\",\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Provider is exist.\n\n\n404\n: Provider is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All Providers\n#\n\n\nGET /providers\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/provider -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"digitalocean_access_token\": \"random-token\",\n        \"digitalocean_backups\": false,\n        \"digitalocean_image\": \"ubuntu-14-04-x64\",\n        \"digitalocean_ipv6\": false,\n        \"digitalocean_private_networking\": false,\n        \"digitalocean_region\": \"nyc3\",\n        \"digitalocean_size\": \"4gb\",\n        \"driver\": \"digitalocean\",\n        \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"my-do-provider\",\n    },\n    {\n        \"driver\": \"generic\",\n        \"generic_ip_address\": \"172.10.10.10\",\n        \"generic_ssh_key\": \"/home/johndoe/.ssh/id_rsa\",\n        \"generic_ssh_port\": 22,\n        \"generic_ssh_user\": \"root\",\n        \"id\": \"17f9f346-0d28-45f1-96a0-49473cc21769\",\n        \"name\": \"my-gen-provider\",\n    }\n]\n\n\n\n\nNote, if there's no provider, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nFilter Providers\n#\n\n\nGET /filter-providers\n\n\n\nURL:\n\n\nhttp://localhost:8080/filter-providers\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/filter-providers/digitalocean -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"digitalocean_access_token\": \"random-token\",\n        \"digitalocean_backups\": false,\n        \"digitalocean_image\": \"ubuntu-14-04-x64\",\n        \"digitalocean_ipv6\": false,\n        \"digitalocean_private_networking\": false,\n        \"digitalocean_region\": \"nyc3\",\n        \"digitalocean_size\": \"4gb\",\n        \"driver\": \"digitalocean\",\n        \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"my-do-provider\",\n    }\n]\n\n\n\n\nNote, if there's no provider, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A Provider\n#\n\n\nDELETE /providers/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/providers/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\n\n\n\n\nStatus Code:\n\n\n\n\n204\n: Provider has been deleted.\n\n\n403\n: Access denied. Refer to \nmessage\n key in JSON response for details.\n\n\n404\n: Provider is not exist.\n\n\n500\n: The server having errors.",
            "title": "Provider"
        },
        {
            "location": "/reference/api/provider/#provider-api",
            "text": "",
            "title": "Provider API"
        },
        {
            "location": "/reference/api/provider/#overview",
            "text": "Provider is an entity represents a service that provides server. An example of provider is a cloud service.\nCurrently, there are various supported provider types:   DigitalOcean .  AWS .  Generic; this is a  Bring Your Own Provider  style. This should be used if none of any provider mentioned above is selected.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/provider/#create-new-provider",
            "text": "Any supported provider type can be created by sending a request to  /providers/{type}  URL, where  {type}  is the name of provider type mentioned above.",
            "title": "Create New Provider"
        },
        {
            "location": "/reference/api/provider/#digitalocean-provider",
            "text": "POST /providers/digitalocean  URL:  http://localhost:8080/providers/digitalocean  Form parameters:    name  (required)  A unique name of the provider.    digitalocean_access_token  (required)  DigitalOcean access token.    digitalocean_backups  Enable or disable backup for DigitalOcean droplet (turned off by default).    digitalocean_private_networking  Enable or disable private networking for DigitalOcean droplet (turned off by default).    digitalocean_region  (required)  Region where droplet is hosted.  Supported region:   nyc1 : New York 1  nyc2 : New York 2  nyc3 : New York 3  ams2 : Amsterdam 2  ams3 : Amsterdam 3  sgp1 : Singapore 1  lon1 : London 1  sfo1 : San Fransisco 1  tor1 : Toronto 1  fra1 : Frankfurt 1     digitalocean_size  DigitalOcean droplet size.  Supported size:   512mb  (1 CPU)  1gb  (1 CPU)  2gb  (2 CPUs)  4gb  (2 CPUs); this is the minimum recommended size hence it is set by default.  8gb  (4 CPUs)  16gb  (8 CPUs)  32gb  (12 CPUs)  48gb  (16 CPUs)  64gb  (20 CPUs)     Request example:  curl http://localhost:8080/providers/digitalocean \\\n    -d name=my-do-provider \\\n    -d digitalocean_access_token=random-token \\\n    -d digitalocean_region=nyc3 \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\n\n{\n    \"digitalocean_access_token\": \"random-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"my-do-provider\",\n}  Please note,  driver  is also known as provider type.  Status Code:   201 : Provider is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  500 : The server having errors.",
            "title": "DigitalOcean Provider"
        },
        {
            "location": "/reference/api/provider/#generic-provider",
            "text": "POST /providers/generic  URL:  http://localhost:8080/providers/generic  Form parameters:    name  (required)  A unique name of the provider.    generic_ip_address  (required)  IP address of remote machine.    generic_ssh_key  (required)  Absolute path to private key used for SSH connection.    generic_ssh_user  (required)  SSH user used for SSH connection.    generic_ssh_port  (required)  Port used for SSH connection.    Request example:  curl http://localhost:8080/providers/digitalocean \\\n    -d name=my-gen-provider \\\n    -d generic_ip_address=172.10.10.10 \\\n    -d generic_ssh_key=/home/johndoe/.ssh/id_rsa \\\n    -d generic_ssh_user=root \\\n    -d generic_ssh_port=22 \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/17f9f346-0d28-45f1-96a0-49473cc21769\n\n{\n    \"driver\": \"generic\",\n    \"generic_ip_address\": \"172.10.10.10\",\n    \"generic_ssh_key\": \"/home/johndoe/.ssh/id_rsa\",\n    \"generic_ssh_port\": 22,\n    \"generic_ssh_user\": \"root\",\n    \"id\": \"17f9f346-0d28-45f1-96a0-49473cc21769\",\n    \"name\": \"my-gen-provider\",\n}  Please note,  driver  is also known as provider type.  Status Code:   201 : Provider is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  500 : The server having errors.",
            "title": "Generic Provider"
        },
        {
            "location": "/reference/api/provider/#aws-provider",
            "text": "POST /providers/aws  URL:  http://localhost:8080/providers/aws  Form parameters:    name  (required)  A unique name of the provider.    amazonec2_access_key  (required)  Access key of aws cloud service.    amazonec2_secret_key  (required)  Secret key of aws cloud service.    amazonec2_region  (required)  Region where vm is hosted.  Supported region:   us-east-1 : US East (N. Virginia)  us-west-2 : US West (Oregon)  us-west-1 : US West (N. California)  eu-west-1 : EU (Ireland)  eu-central-1 : EU (Frankfurt)  ap-southeast-1 : Asia Pacific (Singapore)  ap-northeast-1 : Asia Pacific (Tokyo)  ap-southeast-2 : Asia Pacific (Sydney)  ap-northeast-2 : Asia Pacific (Seoul)  sa-east-1 : South America (S\u00e3o Paulo)     amazonec2_instance_type  AWS instance type.  Supported types:   t2.micro  m4.large  m4.xlarge  m4.2xlarge  m4.4xlarge  m4.10xlarge     amazonec2_private_address_only  Enable or disable private networking for AWS VM (turned off by default).     Request example:  curl http://localhost:8080/providers/aws \\\n    -d name=my-aws-provider \\\n    -d amazonec2_access_key=xx-xx-xx \\\n    -d amazonec2_secret_key=xx-xx-xx \\\n    -d amazonec2_region=us-east-1 \\\n    -d amazonec2_instance_type=t2.micro \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/providers/17f9f346-0d28-45f1-96a0-49473cc21769\n\n{\n    \"driver\": \"amazonec2\",\n    \"id\": \"9234f346-0d28-45f1-67a0-49473cc897xx\",\n    \"name\": \"my-aws-provider\",\n    \"amazonec2_access_key\": \"xx-xx-xx\",\n    \"amazonec2_secret_key\": \"xx-xx-xx\",\n    \"amazonec2_ami\": \"ami-5f709f34\",\n    \"amazonec2_instance_type\": \"t2.micro\",\n    \"amazonec2_region\": \"us-east-1\",\n    \"amazonec2_private_address_only\": \"false\",\n}  Status Code:   201 : Provider is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  500 : The server having errors.",
            "title": "AWS Provider"
        },
        {
            "location": "/reference/api/provider/#get-a-provider",
            "text": "GET /providers/{id}  URL:  http://localhost:8080/providers/{id}  Request example:  curl http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"digitalocean_access_token\": \"random-token\",\n    \"digitalocean_backups\": false,\n    \"digitalocean_image\": \"ubuntu-14-04-x64\",\n    \"digitalocean_ipv6\": false,\n    \"digitalocean_private_networking\": false,\n    \"digitalocean_region\": \"nyc3\",\n    \"digitalocean_size\": \"4gb\",\n    \"driver\": \"digitalocean\",\n    \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"my-do-provider\",\n}  Status Code:   200 : Provider is exist.  404 : Provider is not exist.  500 : The server having errors.",
            "title": "Get A Provider"
        },
        {
            "location": "/reference/api/provider/#list-all-providers",
            "text": "GET /providers  URL:  http://localhost:8080/providers  Request example:  curl http://localhost:8080/provider -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"digitalocean_access_token\": \"random-token\",\n        \"digitalocean_backups\": false,\n        \"digitalocean_image\": \"ubuntu-14-04-x64\",\n        \"digitalocean_ipv6\": false,\n        \"digitalocean_private_networking\": false,\n        \"digitalocean_region\": \"nyc3\",\n        \"digitalocean_size\": \"4gb\",\n        \"driver\": \"digitalocean\",\n        \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"my-do-provider\",\n    },\n    {\n        \"driver\": \"generic\",\n        \"generic_ip_address\": \"172.10.10.10\",\n        \"generic_ssh_key\": \"/home/johndoe/.ssh/id_rsa\",\n        \"generic_ssh_port\": 22,\n        \"generic_ssh_user\": \"root\",\n        \"id\": \"17f9f346-0d28-45f1-96a0-49473cc21769\",\n        \"name\": \"my-gen-provider\",\n    }\n]  Note, if there's no provider, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All Providers"
        },
        {
            "location": "/reference/api/provider/#filter-providers",
            "text": "GET /filter-providers  URL:  http://localhost:8080/filter-providers  Request example:  curl http://localhost:8080/filter-providers/digitalocean -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"digitalocean_access_token\": \"random-token\",\n        \"digitalocean_backups\": false,\n        \"digitalocean_image\": \"ubuntu-14-04-x64\",\n        \"digitalocean_ipv6\": false,\n        \"digitalocean_private_networking\": false,\n        \"digitalocean_region\": \"nyc3\",\n        \"digitalocean_size\": \"4gb\",\n        \"driver\": \"digitalocean\",\n        \"id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"my-do-provider\",\n    }\n]  Note, if there's no provider, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "Filter Providers"
        },
        {
            "location": "/reference/api/provider/#delete-a-provider",
            "text": "DELETE /providers/{id}  URL:  http://localhost:8080/providers/{id}  Request example:  curl http://localhost:8080/providers/fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json  Status Code:   204 : Provider has been deleted.  403 : Access denied. Refer to  message  key in JSON response for details.  404 : Provider is not exist.  500 : The server having errors.",
            "title": "Delete A Provider"
        },
        {
            "location": "/reference/api/node/",
            "text": "Node API\n\n\nOverview\n\n\nCreate New Node\n\n\nDiscovery Node\n\n\nMaster Node\n\n\nWorker Node\n\n\n\n\n\n\nGet A Node\n\n\nRetry a Node deployment\n\n\nList All Nodes\n\n\nDelete A Node\n\n\n\n\n\n\n\n\n\n\nNode API\n#\n\n\nOverview\n#\n\n\nNode is an entity represents the host of containers.\nCurrently there are various supported node types:\n\n\n\n\nDiscovery; used for service discovery\n\n\nMaster\n\n\nWorker\n\n\n\n\n\n\nCreate New Node\n#\n\n\nPOST /nodes/{type}\n\n\n\nAny supported node type can be created by sending a request to \n/nodes/{type}\n URL, where \n{type}\n is the name of node type mentioned above.\n\n\nDiscovery Node\n#\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/discovery\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nName of the node. This is also acts as its hostname. Currently, the name must be set as \ngluu.discovery\n.\n\n\n\n\n\n\nprovider_id\n (required)\n\n\nThe ID of provider. Note, \ngeneric\n provider can be used only once by a node.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/discovery \\\n    -d name=gluu.discovery \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu.discovery\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"gluu.discovery\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518677\",\n    \"type\": \"discovery\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n202\n: Request has been accepted.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied. Refer to message key in JSON response for details.\n\n\n500\n: The server having errors.\n\n\n\n\nMaster Node\n#\n\n\nThere are prerequisites before creating a \nmaster\n node:\n\n\n\n\ndiscovery\n node must exist.\n\n\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/master\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nName of the node. This is also acts as its hostname.\n\n\n\n\n\n\nprovider_id\n (required)\n\n\nThe ID of provider. Note, \ngeneric\n provider can be used only once by a node.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/master \\\n    -d name=master-node \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/master-node\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"master-node\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"type\": \"master\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n201\n: Node is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied. Refer to message key in JSON response for details.\n\n\n500\n: The server having errors.\n\n\n\n\nWorker Node\n#\n\n\nThere are prerequisites before creating a \nworker\n node:\n\n\n\n\nmaster\n node must exist.\n\n\nMust have a license key. See \nLicense Key API\n for details.\n\n\n\n\nIt's worth noting that when license for \nworker\n node is expired,\nserver will try to retrieve new license automatically. If succeed, the node will use new license.\nOtherwise, all \noxauth\n containers deployed inside the node will be disabled from cluster.\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/worker\n\n\n\nForm parameters:\n\n\n\n\n\n\nname\n (required)\n\n\nName of the node. This is also acts as its hostname.\n\n\n\n\n\n\nprovider_id\n (required)\n\n\nThe ID of provider. Note, \ngeneric\n provider can be used only once by a node.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/worker \\\n    -d name=worker-node-1 \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/worker-node-1\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n201\n: Node is successfully created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied. Refer to message key in JSON response for details.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Node\n#\n\n\nGET /nodes/{name}\n\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/{name}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/worker-node-1 -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Node is exist.\n\n\n404\n: Node is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nRetry a Node deployment\n#\n\n\nPUT /nodes/{name}\n\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/{name}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/worker-node-1 -X PUT -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/worker-node-1\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n202\n: Request has been accepted.\n\n\n404\n: Node is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All Nodes\n#\n\n\nGET /nodes\n\n\n\nURL:\n\n\nhttp://localhost:8080/nodes\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"gluu.discovery\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518677\",\n        \"type\": \"discovery\"\n    },\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"master-node\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"type\": \"master\"\n    },\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"worker-node-1\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n        \"type\": \"worker\"\n    }\n]\n\n\n\n\nNote, if there's no node, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A Node\n#\n\n\nDELETE /nodes/{name}\n\n\n\nURL:\n\n\nhttp://localhost:8080/nodes/{name}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/nodes/worker-node-1 -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\n\n\n\n\nStatus Code:\n\n\n\n\n204\n: Node has been deleted.\n\n\n403\n: Access denied. Refer to \nmessage\n key in JSON response for details.\n\n\n404\n: Node is not exist.\n\n\n500\n: The server having errors.",
            "title": "Node"
        },
        {
            "location": "/reference/api/node/#node-api",
            "text": "",
            "title": "Node API"
        },
        {
            "location": "/reference/api/node/#overview",
            "text": "Node is an entity represents the host of containers.\nCurrently there are various supported node types:   Discovery; used for service discovery  Master  Worker",
            "title": "Overview"
        },
        {
            "location": "/reference/api/node/#create-new-node",
            "text": "POST /nodes/{type}  Any supported node type can be created by sending a request to  /nodes/{type}  URL, where  {type}  is the name of node type mentioned above.",
            "title": "Create New Node"
        },
        {
            "location": "/reference/api/node/#discovery-node",
            "text": "URL:  http://localhost:8080/nodes/discovery  Form parameters:    name  (required)  Name of the node. This is also acts as its hostname. Currently, the name must be set as  gluu.discovery .    provider_id  (required)  The ID of provider. Note,  generic  provider can be used only once by a node.    Request example:  curl http://localhost:8080/nodes/discovery \\\n    -d name=gluu.discovery \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i  Response example:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/gluu.discovery\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"gluu.discovery\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518677\",\n    \"type\": \"discovery\"\n}  Status Code:   202 : Request has been accepted.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied. Refer to message key in JSON response for details.  500 : The server having errors.",
            "title": "Discovery Node"
        },
        {
            "location": "/reference/api/node/#master-node",
            "text": "There are prerequisites before creating a  master  node:   discovery  node must exist.   URL:  http://localhost:8080/nodes/master  Form parameters:    name  (required)  Name of the node. This is also acts as its hostname.    provider_id  (required)  The ID of provider. Note,  generic  provider can be used only once by a node.    Request example:  curl http://localhost:8080/nodes/master \\\n    -d name=master-node \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/master-node\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"master-node\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"type\": \"master\"\n}  Status Code:   201 : Node is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied. Refer to message key in JSON response for details.  500 : The server having errors.",
            "title": "Master Node"
        },
        {
            "location": "/reference/api/node/#worker-node",
            "text": "There are prerequisites before creating a  worker  node:   master  node must exist.  Must have a license key. See  License Key API  for details.   It's worth noting that when license for  worker  node is expired,\nserver will try to retrieve new license automatically. If succeed, the node will use new license.\nOtherwise, all  oxauth  containers deployed inside the node will be disabled from cluster.  URL:  http://localhost:8080/nodes/worker  Form parameters:    name  (required)  Name of the node. This is also acts as its hostname.    provider_id  (required)  The ID of provider. Note,  generic  provider can be used only once by a node.    Request example:  curl http://localhost:8080/nodes/worker \\\n    -d name=worker-node-1 \\\n    -d provider_id=fe3eeb1d-7731-43f7-aa90-767d16fa3ab4 \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/worker-node-1\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}  Status Code:   201 : Node is successfully created.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied. Refer to message key in JSON response for details.  500 : The server having errors.",
            "title": "Worker Node"
        },
        {
            "location": "/reference/api/node/#get-a-node",
            "text": "GET /nodes/{name}  URL:  http://localhost:8080/nodes/{name}  Request example:  curl http://localhost:8080/nodes/worker-node-1 -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}  Status Code:   200 : Node is exist.  404 : Node is not exist.  500 : The server having errors.",
            "title": "Get A Node"
        },
        {
            "location": "/reference/api/node/#retry-a-node-deployment",
            "text": "PUT /nodes/{name}  URL:  http://localhost:8080/nodes/{name}  Request example:  curl http://localhost:8080/nodes/worker-node-1 -X PUT -i  Response example:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/nodes/worker-node-1\n\n{\n    \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n    \"name\": \"worker-node-1\",\n    \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n    \"type\": \"worker\"\n}  Status Code:   202 : Request has been accepted.  404 : Node is not exist.  500 : The server having errors.",
            "title": "Retry a Node deployment"
        },
        {
            "location": "/reference/api/node/#list-all-nodes",
            "text": "GET /nodes  URL:  http://localhost:8080/nodes  Request example:  curl http://localhost:8080/nodes -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"gluu.discovery\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518677\",\n        \"type\": \"discovery\"\n    },\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"master-node\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"type\": \"master\"\n    },\n    {\n        \"provider_id\": \"fe3eeb1d-7731-43f7-aa90-767d16fa3ab4\",\n        \"name\": \"worker-node-1\",\n        \"id\": \"283bfa41-2121-4433-9741-875004518699\",\n        \"type\": \"worker\"\n    }\n]  Note, if there's no node, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All Nodes"
        },
        {
            "location": "/reference/api/node/#delete-a-node",
            "text": "DELETE /nodes/{name}  URL:  http://localhost:8080/nodes/{name}  Request example:  curl http://localhost:8080/nodes/worker-node-1 -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json  Status Code:   204 : Node has been deleted.  403 : Access denied. Refer to  message  key in JSON response for details.  404 : Node is not exist.  500 : The server having errors.",
            "title": "Delete A Node"
        },
        {
            "location": "/reference/api/container/",
            "text": "Container API\n\n\nOverview\n\n\nCreate New Container\n\n\nGet A Container\n\n\nList All Containers\n\n\nFilter Containers\n\n\nDelete A Container\n\n\nScale Container\n\n\nDescale Container\n\n\n\n\n\n\n\n\n\n\nContainer API\n#\n\n\nOverview\n#\n\n\nContainer is an entity represents a \ndocker\n container managed by Gluu.\n\n\nCreate New Container\n#\n\n\nPOST /containers/{type}\n\n\n\nAny supported container can be created by sending a request to \n/containers/{type}\n URL,\nwhere \n{type}\n is one of the container types as listed below:\n\n\n\n\nldap\n\n\noxauth\n\n\noxtrust\n\n\nnginx\n\n\n\n\nThere are few rules about container:\n\n\n\n\nOnly 1 \nldap\n container can be deployed in each node.\n\n\nOnly 1 \nnginx\n container can be deployed in each node.\n\n\nOnly 1 \noxtrust\n container can be deployed in the cluster and it must be deployed in master node.\n\n\nThere's no restriction on how many \noxauth\n container per node.\n\n\n\n\nURL:\n\n\nhttp://localhost:8080/containers/{type}\n\n\n\nForm parameters:\n\n\n\n\n\n\nnode_id\n (required)\n\n\nThe ID of Node.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers/ldap \\\n    -d node_id=283bfa41-2121-4433-9741-875004518688 \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\n\n{\n    \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"ldap_port\": \"1389\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldaps_port\": \"1636\",\n    \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n    \"type\": \"ldap\",\n    \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n    \"ldap_jmx_port\": \"1689\",\n    \"state\": \"IN_PROGRESS\",\n    \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n    \"cid\": \"7d3b34fe4cd9\"\n}\n\n\n\n\nSince deploying a container may take a while, the build process is running as background job.\nAs we can see in example above, the \nstate\n is set as \nIN_PROGRESS\n.\nTo track the deployment progress we can send requests periodically to the URL as shown in \nX-Container-Setup-Log\n header.\n\n\nStatus Code:\n\n\n\n\n202\n: Request has been accepted.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Container\n#\n\n\nGET /containers/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/containers/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers/58848b94-0671-48bc-9c94-04b0351886f0 -i\n\n\n\n\nor\n\n\ncurl http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"ldap_port\": \"1389\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldaps_port\": \"1636\",\n    \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n    \"type\": \"ldap\",\n    \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n    \"ldap_jmx_port\": \"1689\",\n    \"state\": \"IN_PROGRESS\",\n    \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n    \"cid\": \"7d3b34fe4cd9\"\n}\n\n\n\n\nThere are 4 states we need to know:\n\n\n\n\nIN_PROGRESS\n: container is being deployed\n\n\nSUCCESS\n: container is successfully deployed\n\n\nFAILED\n: container is failed\n\n\nDISABLED\n: container is disabled\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Container is exist.\n\n\n404\n: Container is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All Containers\n#\n\n\nGET /containers\n\n\n\nURL:\n\n\nhttp://localhost:8080/containers\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"ldap_port\": \"1389\",\n        \"ldap_admin_port\": \"4444\",\n        \"ldap_binddn\": \"cn=directory manager\",\n        \"ldaps_port\": \"1636\",\n        \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n        \"type\": \"ldap\",\n        \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n        \"ldap_jmx_port\": \"1689\",\n        \"state\": \"IN_PROGRESS\",\n        \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n        \"cid\": \"7d3b34fe4cd9\"\n    }\n]\n\n\n\n\nNote, if there's no container, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nFilter Containers\n#\n\n\nGET /filter-containers/{type}\n\n\n\nURL:\n\n\nhttp://localhost:8080/filter-containers/{type}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/filter-containers/ldap -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"ldap_port\": \"1389\",\n        \"ldap_admin_port\": \"4444\",\n        \"ldap_binddn\": \"cn=directory manager\",\n        \"ldaps_port\": \"1636\",\n        \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n        \"type\": \"ldap\",\n        \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n        \"ldap_jmx_port\": \"1689\",\n        \"state\": \"IN_PROGRESS\",\n        \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n        \"cid\": \"7d3b34fe4cd9\"\n    }\n]\n\n\n\n\nNote, if there's no container, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A Container\n#\n\n\nDELETE /containers/{id}\n\n\n\nBy default, container with \nIN_PROGRESS\n state cannot be deleted.\nAny attempt to delete container with \nIN_PROGRESS\n state will raise status code 403.\nTo force container deletion, add \nforce_rm\n option in the request (see below).\n\n\nURL:\n\n\nhttp://localhost:8080/containers/{id}\n\n\n\nQuery string parameters:\n\n\n\n\n\n\nforce_rm\n (optional)\n\n\nA boolean to delete the container regardless of its state. By default is set to \nfalse\n.\n\n\n\n\nTruthy values: \n1\n, \nTrue\n, \ntrue\n, or \nt\n\n\nFalsy values: \n0\n, \nFalse\n, \nfalse\n, or \nf\n\n\n\n\nUnknown value will be ignored.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers/58848b94-0671-48bc-9c94-04b0351886f0 -X DELETE -i\n\n\n\n\nor\n\n\ncurl http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\nX-Container-Teardown-Log: http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\n\n\n\n\nSince deleting (teardown) a container may take a while, the deletion process is running as background job.\nTo track the teardown progress we can make requests periodically to the URL as shown in \nX-Container-Teardown-Log\n header.\n\n\nStatus Code:\n\n\n\n\n204\n: Container has been deleted.\n\n\n403\n: Access denied.\n\n\n404\n: Container is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nScale Container\n#\n\n\nPOST /scale-containers/{container_type}/{number}\n\n\n\nThis will try to deploy given numbers of containers of given type\n\n\nContainer type:\n\n\n\n\noxauth\n\n\n\n\nURL:\n\n\nhttp://localhost:8080/scale-containers/{container_type}/{number}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers/oxauth/20 -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\n{\n    \"status\": 202\n    \"message\": \"deploying 20 oxauth\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n202\n: request accepted.\n\n\n403\n: Access denied.\n\n\n404\n: Container type not supported.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDescale Container\n#\n\n\nDELETE /scale-containers/{container_type}/{number}\n\n\n\nThis will try to remove given numbers of running containers of given type\n\n\nContainer type:\n\n\n\n\noxauth\n\n\n\n\nURL:\n\n\nhttp://localhost:8080/scale-containers/{container_type}/{number}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/containers/oxauth/20 -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 202 ACCEPTED\nContent-Type: application/json\n{\n    \"status\": 202\n    \"message\": \"deleting 20 oxauth\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n202\n: request accepted.\n\n\n403\n: Access denied.\n\n\n404\n: Container type not supported.\n\n\n500\n: The server having errors.",
            "title": "Container"
        },
        {
            "location": "/reference/api/container/#container-api",
            "text": "",
            "title": "Container API"
        },
        {
            "location": "/reference/api/container/#overview",
            "text": "Container is an entity represents a  docker  container managed by Gluu.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/container/#create-new-container",
            "text": "POST /containers/{type}  Any supported container can be created by sending a request to  /containers/{type}  URL,\nwhere  {type}  is one of the container types as listed below:   ldap  oxauth  oxtrust  nginx   There are few rules about container:   Only 1  ldap  container can be deployed in each node.  Only 1  nginx  container can be deployed in each node.  Only 1  oxtrust  container can be deployed in the cluster and it must be deployed in master node.  There's no restriction on how many  oxauth  container per node.   URL:  http://localhost:8080/containers/{type}  Form parameters:    node_id  (required)  The ID of Node.    Request example:  curl http://localhost:8080/containers/ldap \\\n    -d node_id=283bfa41-2121-4433-9741-875004518688 \\\n    -X POST -i  Response example:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\nLocation: http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\nX-Container-Setup-Log: http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\n\n{\n    \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"ldap_port\": \"1389\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldaps_port\": \"1636\",\n    \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n    \"type\": \"ldap\",\n    \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n    \"ldap_jmx_port\": \"1689\",\n    \"state\": \"IN_PROGRESS\",\n    \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n    \"cid\": \"7d3b34fe4cd9\"\n}  Since deploying a container may take a while, the build process is running as background job.\nAs we can see in example above, the  state  is set as  IN_PROGRESS .\nTo track the deployment progress we can send requests periodically to the URL as shown in  X-Container-Setup-Log  header.  Status Code:   202 : Request has been accepted.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied.  500 : The server having errors.",
            "title": "Create New Container"
        },
        {
            "location": "/reference/api/container/#get-a-container",
            "text": "GET /containers/{id}  URL:  http://localhost:8080/containers/{id}  Request example:  curl http://localhost:8080/containers/58848b94-0671-48bc-9c94-04b0351886f0 -i  or  curl http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n    \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"ldap_port\": \"1389\",\n    \"ldap_admin_port\": \"4444\",\n    \"ldap_binddn\": \"cn=directory manager\",\n    \"ldaps_port\": \"1636\",\n    \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n    \"type\": \"ldap\",\n    \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n    \"ldap_jmx_port\": \"1689\",\n    \"state\": \"IN_PROGRESS\",\n    \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n    \"cid\": \"7d3b34fe4cd9\"\n}  There are 4 states we need to know:   IN_PROGRESS : container is being deployed  SUCCESS : container is successfully deployed  FAILED : container is failed  DISABLED : container is disabled   Status Code:   200 : Container is exist.  404 : Container is not exist.  500 : The server having errors.",
            "title": "Get A Container"
        },
        {
            "location": "/reference/api/container/#list-all-containers",
            "text": "GET /containers  URL:  http://localhost:8080/containers  Request example:  curl http://localhost:8080/containers -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"ldap_port\": \"1389\",\n        \"ldap_admin_port\": \"4444\",\n        \"ldap_binddn\": \"cn=directory manager\",\n        \"ldaps_port\": \"1636\",\n        \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n        \"type\": \"ldap\",\n        \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n        \"ldap_jmx_port\": \"1689\",\n        \"state\": \"IN_PROGRESS\",\n        \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n        \"cid\": \"7d3b34fe4cd9\"\n    }\n]  Note, if there's no container, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All Containers"
        },
        {
            "location": "/reference/api/container/#filter-containers",
            "text": "GET /filter-containers/{type}  URL:  http://localhost:8080/filter-containers/{type}  Request example:  curl http://localhost:8080/filter-containers/ldap -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"node_id\": \"283bfa41-2121-4433-9741-875004518688\",\n        \"name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"ldap_port\": \"1389\",\n        \"ldap_admin_port\": \"4444\",\n        \"ldap_binddn\": \"cn=directory manager\",\n        \"ldaps_port\": \"1636\",\n        \"cluster_id\": \"9ea4d520-bbba-46f6-b779-c29ee99d2e9e\",\n        \"type\": \"ldap\",\n        \"id\": \"58848b94-0671-48bc-9c94-04b0351886f0\",\n        \"ldap_jmx_port\": \"1689\",\n        \"state\": \"IN_PROGRESS\",\n        \"hostname\": \"7d3b34fe4cd9.ldap.weave.local\",\n        \"cid\": \"7d3b34fe4cd9\"\n    }\n]  Note, if there's no container, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "Filter Containers"
        },
        {
            "location": "/reference/api/container/#delete-a-container",
            "text": "DELETE /containers/{id}  By default, container with  IN_PROGRESS  state cannot be deleted.\nAny attempt to delete container with  IN_PROGRESS  state will raise status code 403.\nTo force container deletion, add  force_rm  option in the request (see below).  URL:  http://localhost:8080/containers/{id}  Query string parameters:    force_rm  (optional)  A boolean to delete the container regardless of its state. By default is set to  false .   Truthy values:  1 ,  True ,  true , or  t  Falsy values:  0 ,  False ,  false , or  f   Unknown value will be ignored.    Request example:  curl http://localhost:8080/containers/58848b94-0671-48bc-9c94-04b0351886f0 -X DELETE -i  or  curl http://localhost:8080/containers/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json\nX-Container-Teardown-Log: http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown  Since deleting (teardown) a container may take a while, the deletion process is running as background job.\nTo track the teardown progress we can make requests periodically to the URL as shown in  X-Container-Teardown-Log  header.  Status Code:   204 : Container has been deleted.  403 : Access denied.  404 : Container is not exist.  500 : The server having errors.",
            "title": "Delete A Container"
        },
        {
            "location": "/reference/api/container/#scale-container",
            "text": "POST /scale-containers/{container_type}/{number}  This will try to deploy given numbers of containers of given type  Container type:   oxauth   URL:  http://localhost:8080/scale-containers/{container_type}/{number}  Request example:  curl http://localhost:8080/containers/oxauth/20 -X POST -i  Response example:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\n{\n    \"status\": 202\n    \"message\": \"deploying 20 oxauth\"\n}  Status Code:   202 : request accepted.  403 : Access denied.  404 : Container type not supported.  500 : The server having errors.",
            "title": "Scale Container"
        },
        {
            "location": "/reference/api/container/#descale-container",
            "text": "DELETE /scale-containers/{container_type}/{number}  This will try to remove given numbers of running containers of given type  Container type:   oxauth   URL:  http://localhost:8080/scale-containers/{container_type}/{number}  Request example:  curl http://localhost:8080/containers/oxauth/20 -X DELETE -i  Response example:  HTTP/1.0 202 ACCEPTED\nContent-Type: application/json\n{\n    \"status\": 202\n    \"message\": \"deleting 20 oxauth\"\n}  Status Code:   202 : request accepted.  403 : Access denied.  404 : Container type not supported.  500 : The server having errors.",
            "title": "Descale Container"
        },
        {
            "location": "/reference/api/container_log/",
            "text": "Container Log API\n\n\nOverview\n\n\nGet A Container Log\n\n\nGet A Container Setup Log\n\n\nGet A Container Teardown Log\n\n\nList All Container Logs\n\n\nDelete A Container Log\n\n\n\n\n\n\n\n\n\n\nContainer Log API\n#\n\n\nOverview\n#\n\n\nContainer Log is an entity holds setup and teardown logs for specific container.\n\n\nEach ContainerLog object holds the state of setup or teardown process:\n\n\n\n\nSETUP_IN_PROGRESS\n: container deployment is in progress.\n\n\nSETUP_FINISHED\n: container deployment is finished (regardless succeed or failed).\n\n\nTEARDOWN_IN_PROGRESS\n: container deletion is in progress.\n\n\nTEARDOWN_FINISHED\n: container deletion is finished (regardless succeed or failed).\n\n\n\n\n\n\nGet A Container Log\n#\n\n\nGET /container_logs/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/container_logs/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"SETUP_FINISHED\",\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}\n\n\n\n\nNote: \nteardown_log_url\n may have empty string value if container is not deleted yet.\n\n\nStatus Code:\n\n\n\n\n200\n: Container Log is exist.\n\n\n404\n: Container Log is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Container Setup Log\n#\n\n\nGET /container_logs/{id}/setup\n\n\n\nURL:\n\n\nhttp://localhost:8080/container_logs/{id}/setup\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n\n\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_contents\": [\n        \"2016-02-23 00:49:12,074 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - attaching weave IP address 10.2.0.1/16\",\n        \"2016-02-23 00:53:17,153 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - gluuopendj setup is finished (242.836978912 seconds)\"\n    ],\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"SETUP_FINISHED\",\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Container Log is exist.\n\n\n404\n: Container Log is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A Container Teardown Log\n#\n\n\nGET /container_logs/{id}/teardown\n\n\n\nURL:\n\n\nhttp://localhost:8080/container_logs/{id}/teardown\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"TEARDOWN_FINISHED\",\n    \"teardown_log_contents\": [\n        \"2016-02-23 00:53:17,153 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - gluuopendj teardown is finished (20.836978912 seconds)\"\n    ],\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Container Log is exist.\n\n\n404\n: Container Log is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All Container Logs\n#\n\n\nGET /container_logs\n\n\n\nURL:\n\n\nhttp://localhost:8080/container_logs\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/container_logs -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n        \"state\": \"SETUP_FINISHED\",\n        \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n    }\n]\n\n\n\n\nNote:\n\n\n\n\nIf there's no container logs, the response body will return empty list.\n\n\nteardown_log_url\n may have empty string value if container is not deleted yet.\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A Container Log\n#\n\n\nDELETE /container_logs/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/container_logs/{id}\n\n\n\ncurl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\n\n\n\n\nStatus Code:\n\n\n\n\n204\n: Container Log has been deleted.\n\n\n404\n: Container Log is not exist.\n\n\n500\n: The server having errors.",
            "title": "Container Log"
        },
        {
            "location": "/reference/api/container_log/#container-log-api",
            "text": "",
            "title": "Container Log API"
        },
        {
            "location": "/reference/api/container_log/#overview",
            "text": "Container Log is an entity holds setup and teardown logs for specific container.  Each ContainerLog object holds the state of setup or teardown process:   SETUP_IN_PROGRESS : container deployment is in progress.  SETUP_FINISHED : container deployment is finished (regardless succeed or failed).  TEARDOWN_IN_PROGRESS : container deletion is in progress.  TEARDOWN_FINISHED : container deletion is finished (regardless succeed or failed).",
            "title": "Overview"
        },
        {
            "location": "/reference/api/container_log/#get-a-container-log",
            "text": "GET /container_logs/{id}  URL:  http://localhost:8080/container_logs/{id}  Request example:  curl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"SETUP_FINISHED\",\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}  Note:  teardown_log_url  may have empty string value if container is not deleted yet.  Status Code:   200 : Container Log is exist.  404 : Container Log is not exist.  500 : The server having errors.",
            "title": "Get A Container Log"
        },
        {
            "location": "/reference/api/container_log/#get-a-container-setup-log",
            "text": "GET /container_logs/{id}/setup  URL:  http://localhost:8080/container_logs/{id}/setup  Request example:  curl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_contents\": [\n        \"2016-02-23 00:49:12,074 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - attaching weave IP address 10.2.0.1/16\",\n        \"2016-02-23 00:53:17,153 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - gluuopendj setup is finished (242.836978912 seconds)\"\n    ],\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"SETUP_FINISHED\",\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}  Status Code:   200 : Container Log is exist.  404 : Container Log is not exist.  500 : The server having errors.",
            "title": "Get A Container Setup Log"
        },
        {
            "location": "/reference/api/container_log/#get-a-container-teardown-log",
            "text": "GET /container_logs/{id}/teardown  URL:  http://localhost:8080/container_logs/{id}/teardown  Request example:  curl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n    \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n    \"state\": \"TEARDOWN_FINISHED\",\n    \"teardown_log_contents\": [\n        \"2016-02-23 00:53:17,153 - gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 - INFO  - gluuopendj teardown is finished (20.836978912 seconds)\"\n    ],\n    \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n}  Status Code:   200 : Container Log is exist.  404 : Container Log is not exist.  500 : The server having errors.",
            "title": "Get A Container Teardown Log"
        },
        {
            "location": "/reference/api/container_log/#list-all-container-logs",
            "text": "GET /container_logs  URL:  http://localhost:8080/container_logs  Request example:  curl http://localhost:8080/container_logs -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"id\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"container_name\": \"gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043\",\n        \"setup_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/setup\",\n        \"state\": \"SETUP_FINISHED\",\n        \"teardown_log_url\": \"http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043/teardown\"\n    }\n]  Note:   If there's no container logs, the response body will return empty list.  teardown_log_url  may have empty string value if container is not deleted yet.   Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All Container Logs"
        },
        {
            "location": "/reference/api/container_log/#delete-a-container-log",
            "text": "DELETE /container_logs/{id}  URL:  http://localhost:8080/container_logs/{id}  curl http://localhost:8080/container_logs/gluuopendj_f42dd3bf-28c8-450c-b221-77b677b59043 -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json  Status Code:   204 : Container Log has been deleted.  404 : Container Log is not exist.  500 : The server having errors.",
            "title": "Delete A Container Log"
        },
        {
            "location": "/reference/api/license_key/",
            "text": "License Key API\n\n\nOverview\n\n\nCreate New License Key\n\n\nGet A License key\n\n\nList All License Keys\n\n\nUpdate A License Key\n\n\nDelete A License Key\n\n\n\n\n\n\n\n\n\n\nLicense Key API\n#\n\n\nOverview\n#\n\n\nLicense key represents an entity to manage keys for license bought from Gluu Inc. These keys are required to generate metadata from signed license retrieved from Gluu Inc. license server.\n\n\n\n\nCreate New License Key\n#\n\n\nPOST /license_keys\n\n\n\nURL:\n\n\nhttp://localhost:8080/license_keys\n\n\n\nForm parameters:\n\n\n\n\n\n\npublic_key\n (required)\n\n\nPublic key given when buying a license code. This must use a oneliner (without any space) string.\n\n\n\n\n\n\npublic_password\n (required)\n\n\nPublic password given when buying a license code.\n\n\n\n\n\n\nlicense_password\n (required)\n\n\nLicense password given when buying a license code.\n\n\n\n\n\n\nname\n (required)\n\n\nShort and descriptive key name.\n\n\n\n\n\n\ncode\n (required)\n\n\nLicense code.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/license_keys \\\n    -d public_key=your-public-key \\\n    -d public_password=your-public-password \\\n    -d license_password=your-license-password \\\n    -d name=testing \\\n    -d code=your-code \\\n    -X POST -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 201 CREATED\nLocation: http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"valid\": false,\n    \"metadata\": {}\n}\n\n\n\n\nNote: there's limitation where API doesn't check whether the keys passed as request parameters are the same keys given by license server.\nBad keys will affect signed license's metadata.\nFortunately, there's an API to update the keys. See \nUpdate A License key\n below.\nAlso, \nvalid\n and \nmetadata\n by default uses predefined values, \nfalse\n and empty \n{}\n.\nThese 2 key values will be updated during consumer provider registration.\nRefer to \nGet A License Key\n below to see an example of updated \nvalid\n and \nmetadata\n values.\n\n\nStatus Code:\n\n\n\n\n201\n: License key has been created.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n403\n: Access denied.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nGet A License key\n#\n\n\nGET /license_keys/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/license_keys/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"metadata\": {\n        \"expiration_date\": null,\n        \"license_count_limit\": 20,\n        \"license_features\": [\n            \"gluu_server\"\n        ],\n        \"license_name\": \"testing-license\",\n        \"license_type\": null,\n        \"multi_server\": true,\n        \"thread_count\": 3\n    },\n    \"valid\": true\n}\n\n\n\n\nStatus Code:\n\n\n\n\n200\n: License key is exist.\n\n\n404\n: License key is not exist.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nList All License Keys\n#\n\n\nGET /license_keys\n\n\n\nURL:\n\n\nhttp://localhost:8080/license_keys\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/license_keys -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"code\": \"your-code\",\n        \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n        \"license_password\": \"your-license-password\",\n        \"name\": \"testing\",\n        \"public_key\": \"your-public-key\",\n        \"public_password\": \"your-public-password\",\n        \"metadata\": {\n            \"expiration_date\": null,\n            \"license_count_limit\": 20,\n            \"license_features\": [\n                \"gluu_server\"\n            ],\n            \"license_name\": \"testing-license\",\n            \"license_type\": null,\n            \"multi_server\": true,\n            \"thread_count\": 3\n        },\n        \"valid\": true\n    }\n]\n\n\n\n\nNote, if there's no license key, the response body will return empty list.\n\n\nStatus Code:\n\n\n\n\n200\n: Request is succeed.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nUpdate A License Key\n#\n\n\nPUT /license_keys/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/license_keys/{id}\n\n\n\nForm parameters:\n\n\n\n\n\n\npublic_key\n (required)\n\n\nPublic key given when buying a license code. This must use a oneliner (without any space) string.\n\n\n\n\n\n\npublic_password\n (required)\n\n\nPublic password given when buying a license code.\n\n\n\n\n\n\nlicense_password\n (required)\n\n\nLicense password given when buying a license code.\n\n\n\n\n\n\nname\n (required)\n\n\nShort and descriptive key name.\n\n\n\n\n\n\ncode\n (required)\n\n\nLicense code.\n\n\n\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed \\\n    -d public_key=your-public-key \\\n    -d public_password=your-public-password \\\n    -d license_password=your-license-password \\\n    -d name=testing-2 \\\n    -d code=your-code \\\n    -X PUT -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing-2\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"metadata\": {\n        \"expiration_date\": null,\n        \"license_count_limit\": 20,\n        \"license_features\": [\n            \"gluu_server\"\n        ],\n        \"license_name\": \"testing-license\",\n        \"license_type\": null,\n        \"multi_server\": true,\n        \"thread_count\": 3\n    },\n    \"valid\": true\n}\n\n\n\n\nIf license key successfully updated, all related signed licenses' metadata will be regenerated.\n\n\nStatus Code:\n\n\n\n\n200\n: License key has been updated.\n\n\n400\n: Bad request. Possibly malformed/incorrect parameter value.\n\n\n500\n: The server having errors.\n\n\n\n\n\n\nDelete A License Key\n#\n\n\nDELETE /license_keys/{id}\n\n\n\nURL:\n\n\nhttp://localhost:8080/license_keys/{id}\n\n\n\nRequest example:\n\n\ncurl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed -X DELETE -i\n\n\n\n\nResponse example:\n\n\nHTTP/1.0 204 NO CONTENT\nContent-Type: application/json\n\n\n\n\nStatus Code:\n\n\n\n\n204\n: License key has been deleted.\n\n\n404\n: License key is not exist.\n\n\n500\n: The server having errors.",
            "title": "License Key"
        },
        {
            "location": "/reference/api/license_key/#license-key-api",
            "text": "",
            "title": "License Key API"
        },
        {
            "location": "/reference/api/license_key/#overview",
            "text": "License key represents an entity to manage keys for license bought from Gluu Inc. These keys are required to generate metadata from signed license retrieved from Gluu Inc. license server.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/license_key/#create-new-license-key",
            "text": "POST /license_keys  URL:  http://localhost:8080/license_keys  Form parameters:    public_key  (required)  Public key given when buying a license code. This must use a oneliner (without any space) string.    public_password  (required)  Public password given when buying a license code.    license_password  (required)  License password given when buying a license code.    name  (required)  Short and descriptive key name.    code  (required)  License code.    Request example:  curl http://localhost:8080/license_keys \\\n    -d public_key=your-public-key \\\n    -d public_password=your-public-password \\\n    -d license_password=your-license-password \\\n    -d name=testing \\\n    -d code=your-code \\\n    -X POST -i  Response example:  HTTP/1.0 201 CREATED\nLocation: http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"valid\": false,\n    \"metadata\": {}\n}  Note: there's limitation where API doesn't check whether the keys passed as request parameters are the same keys given by license server.\nBad keys will affect signed license's metadata.\nFortunately, there's an API to update the keys. See  Update A License key  below.\nAlso,  valid  and  metadata  by default uses predefined values,  false  and empty  {} .\nThese 2 key values will be updated during consumer provider registration.\nRefer to  Get A License Key  below to see an example of updated  valid  and  metadata  values.  Status Code:   201 : License key has been created.  400 : Bad request. Possibly malformed/incorrect parameter value.  403 : Access denied.  500 : The server having errors.",
            "title": "Create New License Key"
        },
        {
            "location": "/reference/api/license_key/#get-a-license-key",
            "text": "GET /license_keys/{id}  URL:  http://localhost:8080/license_keys/{id}  Request example:  curl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"metadata\": {\n        \"expiration_date\": null,\n        \"license_count_limit\": 20,\n        \"license_features\": [\n            \"gluu_server\"\n        ],\n        \"license_name\": \"testing-license\",\n        \"license_type\": null,\n        \"multi_server\": true,\n        \"thread_count\": 3\n    },\n    \"valid\": true\n}  Status Code:   200 : License key is exist.  404 : License key is not exist.  500 : The server having errors.",
            "title": "Get A License key"
        },
        {
            "location": "/reference/api/license_key/#list-all-license-keys",
            "text": "GET /license_keys  URL:  http://localhost:8080/license_keys  Request example:  curl http://localhost:8080/license_keys -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n[\n    {\n        \"code\": \"your-code\",\n        \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n        \"license_password\": \"your-license-password\",\n        \"name\": \"testing\",\n        \"public_key\": \"your-public-key\",\n        \"public_password\": \"your-public-password\",\n        \"metadata\": {\n            \"expiration_date\": null,\n            \"license_count_limit\": 20,\n            \"license_features\": [\n                \"gluu_server\"\n            ],\n            \"license_name\": \"testing-license\",\n            \"license_type\": null,\n            \"multi_server\": true,\n            \"thread_count\": 3\n        },\n        \"valid\": true\n    }\n]  Note, if there's no license key, the response body will return empty list.  Status Code:   200 : Request is succeed.  500 : The server having errors.",
            "title": "List All License Keys"
        },
        {
            "location": "/reference/api/license_key/#update-a-license-key",
            "text": "PUT /license_keys/{id}  URL:  http://localhost:8080/license_keys/{id}  Form parameters:    public_key  (required)  Public key given when buying a license code. This must use a oneliner (without any space) string.    public_password  (required)  Public password given when buying a license code.    license_password  (required)  License password given when buying a license code.    name  (required)  Short and descriptive key name.    code  (required)  License code.    Request example:  curl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed \\\n    -d public_key=your-public-key \\\n    -d public_password=your-public-password \\\n    -d license_password=your-license-password \\\n    -d name=testing-2 \\\n    -d code=your-code \\\n    -X PUT -i  Response example:  HTTP/1.0 200 OK\nContent-Type: application/json\n\n{\n    \"code\": \"your-code\",\n    \"id\": \"3bade490-defe-477d-8146-be0f621940ed\",\n    \"license_password\": \"your-license-password\",\n    \"name\": \"testing-2\",\n    \"public_key\": \"your-public-key\",\n    \"public_password\": \"your-public-password\",\n    \"metadata\": {\n        \"expiration_date\": null,\n        \"license_count_limit\": 20,\n        \"license_features\": [\n            \"gluu_server\"\n        ],\n        \"license_name\": \"testing-license\",\n        \"license_type\": null,\n        \"multi_server\": true,\n        \"thread_count\": 3\n    },\n    \"valid\": true\n}  If license key successfully updated, all related signed licenses' metadata will be regenerated.  Status Code:   200 : License key has been updated.  400 : Bad request. Possibly malformed/incorrect parameter value.  500 : The server having errors.",
            "title": "Update A License Key"
        },
        {
            "location": "/reference/api/license_key/#delete-a-license-key",
            "text": "DELETE /license_keys/{id}  URL:  http://localhost:8080/license_keys/{id}  Request example:  curl http://localhost:8080/license_keys/3bade490-defe-477d-8146-be0f621940ed -X DELETE -i  Response example:  HTTP/1.0 204 NO CONTENT\nContent-Type: application/json  Status Code:   204 : License key has been deleted.  404 : License key is not exist.  500 : The server having errors.",
            "title": "Delete A License Key"
        }
    ]
}