

/* ----------------------------------------------------------------------------
 * Defaults
 * ------------------------------------------------------------------------- */

$break: (
  devices: (
    mobile: (
      portrait:   220px  479px,
      landscape:  480px  719px
    ),
    tablet: (
      portrait:   720px  959px,
      landscape:  960px 1199px
    ),
    screen:      1200px
  )
) !default;

/* ----------------------------------------------------------------------------
 * Helper functions
 * ------------------------------------------------------------------------- */

/*
 * Choose minimum and maximum device widths.
 */
@function break-select-min-max($devices) {
  $min: 1000000; $max: 0;
  @each $key, $value in $devices {
    @while type-of($value) == map {
      $value: break-select-min-max($value);
    }
    @if type-of($value) == list {
      @each $number in $value {
        @if type-of($number) == number {
          $min: min($number, $min);
          @if $max != null {
            $max: max($number, $max);
          }
        } @else {
          @warn "Invalid number: #{$number}";
        }
      }
    } @elseif type-of($value) == number {
      $min: min($value, $min);
      $max: null;
    } @else {
      @warn "Invalid tuple: #{$value}";
    }
  }
  @return $min, $max;
}

/*
 * Select minimum and maximum widths for a device breakpoint.
 */
@function break-select-device($device) {
  $devices: map-get($break, devices);
  @for $n from 1 through length($device) {
    @if type-of($devices) == map {
      $devices: map-get($devices, nth($device, $n));
    } @else {
      @warn "Invalid device map: #{$devices}";
    }
  }
  @if type-of($devices) == list or
      type-of($devices) == number {
    $devices: (default: $devices);
  }
  @return break-select-min-max($devices);
}

/* ----------------------------------------------------------------------------
 * Mixins for numeric breakpoints
 * ------------------------------------------------------------------------- */

/*
 * A minimum-maximum media query breakpoint.
 */
@mixin break-at($breakpoint) {
  @if type-of($breakpoint) == number {
    @media only screen and (min-width: $breakpoint) {
      @content;
    }
  } @elseif type-of($breakpoint) == list {
    $min: nth($breakpoint, 1); $max: nth($breakpoint, 2);
    @if type-of($min) == number and type-of($max) == number {
      @media only screen and (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else {
      @warn "Invalid breakpoint: #{$breakpoint}";
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}";
  }
}

/*
 * An orientation media query breakpoint.
 */
@mixin break-at-orientation($breakpoint) {
  @if type-of($breakpoint) == string {
    @media only screen and (orientation: $breakpoint) {
      @content;
    }
  } @else {
   @warn "Invalid breakpoint: #{$breakpoint}";
  }
}

/*
 * A maximum-aspect-ratio media query breakpoint.
 */
@mixin break-at-ratio($breakpoint) {
  @if type-of($breakpoint) == number {
    @media only screen and (max-aspect-ratio: $breakpoint) {
      @content;
    }
  } @else {
   @warn "Invalid breakpoint: #{$breakpoint}";
  }
}

/* ----------------------------------------------------------------------------
 * Mixins for device breakpoints
 * ------------------------------------------------------------------------- */

/*
 * A minimum-maximum media query device breakpoint.
 */
@mixin break-at-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    @if nth($breakpoint, 2) != null {
      $min: nth($breakpoint, 1); $max: nth($breakpoint, 2);
      @media only screen and (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else {
      @warn "Invalid device: #{$device}";
    }
  } @else {
    @warn "Invalid device: #{$device}";
  }
}

/*
 * A minimum media query device breakpoint.
 */
@mixin break-from-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    $min: nth($breakpoint, 1);
    @media only screen and (min-width: $min) {
      @content;
    }
  } @else {
    @warn "Invalid device: #{$device}";
  }
}

/*
 * A maximum media query device breakpoint.
 */
@mixin break-to-device($device) {
  @if type-of($device) == string {
    $device: $device,;
  }
  @if type-of($device) == list {
    $breakpoint: break-select-device($device);
    $max: nth($breakpoint, 1) - 1;
    @media only screen and (max-width: $max) {
      @content;
    }
  } @else {
    @warn "Invalid device: #{$device}";
  }
}